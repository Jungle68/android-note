import{_ as p,r as o,o as c,c as l,a as n,b as t,d as s,e as a}from"./app.89e8a229.js";const i={},u=n("h2",{id:"volley\u6E90\u7801\u5206\u6790",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#volley\u6E90\u7801\u5206\u6790","aria-hidden":"true"},"#"),s(" Volley\u6E90\u7801\u5206\u6790")],-1),k=n("p",null,"Volley\u7B80\u4ECB",-1),r={href:"https://android.googlesource.com/platform/frameworks/volley",target:"_blank",rel:"noopener noreferrer"},d=s("volley\u5B98\u65B9\u5730\u5740"),v=n("br",null,null,-1),m=n("img",{src:"https://raw.githubusercontent.com/CharonChui/Pictures/master/volley.png?raw=true",alt:"image"},null,-1),b=a("<p>\u5728<code>Google I/0 2013</code>\u4E2D\u53D1\u5E03\u4E86<code>Volley</code>.<code>Volley</code>\u662F<code>Android</code>\u5E73\u53F0\u4E0A\u7684\u7F51\u7EDC\u901A\u4FE1\u5E93\uFF0C\u80FD\u4F7F\u7F51\u7EDC\u901A\u4FE1\u66F4\u5FEB\uFF0C\u66F4\u7B80\u5355\uFF0C\u66F4\u5065\u58EE\u3002</p><p>\u8FD9\u662F<code>Volley</code>\u540D\u79F0\u7684\u7531\u6765:<code>a burst or emission of many things or a large amount at once</code>.<code>Volley</code>\u7279\u522B\u9002\u5408\u6570\u636E\u91CF\u4E0D\u5927\u4F46\u662F\u901A\u4FE1\u9891\u7E41\u7684\u573A\u666F\u3002</p>",2),w=n("code",null,"Github",-1),y=s("\u4E0A\u9762\u5DF2\u7ECF\u6709\u5927\u795E\u505A\u4E86\u955C\u50CF\uFF0C\u4F7F\u7528"),h=n("code",null,"Gradle",-1),f=s("\u66F4\u65B9\u4FBF\u3002"),g={href:"https://github.com/mcxiaoke/android-volley",target:"_blank",rel:"noopener noreferrer"},q=s("Volley On Github"),R=a(`<li><p>Volley\u4F7F\u7528<br><code>Volley</code>\u7684\u4F7F\u7528\u975E\u5E38\u65B9\u4FBF\u3002</p><ul><li>\u9996\u5148\u5C31\u662F\u8981\u6784\u5EFA\u4E00\u4E2A<code>RequestQueue</code>\u7684\u8BF7\u6C42\u961F\u5217\uFF0C\u5B83\u53EF\u4EE5\u7F13\u5B58\u6240\u6709<code>Http</code>\u8BF7\u6C42\uFF0C\u5185\u90E8\u5904\u7406\u7684\u975E\u5E38\u5B8C\u5584\uFF0C\u901A\u5E38\u6211\u4EEC\u6574\u4E2A\u5E94\u7528\u53EA\u9700\u8981\u4E00\u4E2A<code>RequestQueue</code>\u5BF9\u8C61\u5373\u53EF\u3002</li><li>\u521B\u5EFA<code>StringRequest</code>\u5BF9\u8C61\uFF0C\u5E76\u4E14\u4F20\u5165\u76F8\u5E94\u7684\u8BF7\u6C42\u5730\u5740\u4EE5\u53CA\u6DFB\u52A0\u8BF7\u6C42\u6210\u529F\u548C\u5931\u8D25\u7684\u56DE\u8C03\u65B9\u6CD5\u3002\u8FD9\u4E00\u6B65\u7684\u610F\u601D\u5C31\u662F\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684\u7F51\u7EDC\u8BF7\u6C42\u3002</li><li>\u5C06\u521A\u624D\u65B0\u521B\u5EFA\u7684<code>StringRequest</code>\u5BF9\u8C61\u52A0\u5165\u5230<code>RequestQueue</code>\u961F\u5217\u4E2D\u3002\u8FD9\u6837\u5C31\u76F8\u5F53\u4E8E\u4F1A\u53BB\u6267\u884C\u8BE5\u8BF7\u6C42\u3002\u7B49\u5230\u6267\u884C\u6210\u529F\u540E\u5C31\u53EF\u4EE5\u5728<code>StringRequest</code>\u4E2D\u8BBE\u7F6E\u7684\u56DE\u8C03\u65B9\u6CD5\u91CC\u9762\u83B7\u53D6\u5230\u76F8\u5E94\u7684\u7ED3\u679C\u3002<br> \u603B\u7ED3\u4E00\u4E0B\uFF0C\u5176\u5B9E\u633A\u50CF\u6211\u4EEC\u6D4F\u89C8\u5668\u7684\u64CD\u4F5C\uFF0C\u7B2C\u4E00\u6B65\u6253\u5F00\u6D4F\u89C8\u5668\uFF0C\u7B2C\u4E8C\u6B65\u8F93\u5165<code>URL</code>\u5730\u5740\u7B2C\u4E09\u6B65\u6309\u56DE\u8F66\u53BB\u6267\u884C\u3002</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpUtil</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HttpUtil</span> instance<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">RequestQueue</span> mQueue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mQueue <span class="token operator">=</span> <span class="token class-name">Volley</span><span class="token punctuation">.</span><span class="token function">newRequestQueue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">HttpUtil</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Request</span> <span class="token function">sendGetRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">HttpListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringRequest</span> stringRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    listener<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>ErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorResponse</span><span class="token punctuation">(</span><span class="token class-name">VolleyError</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    listener<span class="token punctuation">.</span><span class="token function">onErrorResponse</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> stringRequest<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Request</span> <span class="token function">sendPostRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">HttpListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">StringRequest</span> stringRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRequest</span><span class="token punctuation">(</span><span class="token class-name">Request<span class="token punctuation">.</span>Method</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    listener<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>ErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onErrorResponse</span><span class="token punctuation">(</span><span class="token class-name">VolleyError</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    listener<span class="token punctuation">.</span><span class="token function">onErrorResponse</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">protected</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthFailureError</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> map<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        mQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> stringRequest<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Response listener of HttpUtil.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpListener</span> <span class="token punctuation">{</span>

        <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">void</span> <span class="token function">onErrorResponse</span><span class="token punctuation">(</span><span class="token class-name">VolleyError</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),C=a(`<p>\u5230\u8FD9\u91CC\u6211\u4EEC\u5C31\u7B80\u5355\u7684\u4ECB\u7ECD\u4E86\u5B83\u7684\u4F7F\u7528\uFF0C\u5F53\u7136\u8FD8\u6709\u4E00\u4E9B\u5176\u4ED6\u7684<code>Request</code>\u5BF9\u8C61\u4F8B\u5982<code>JsonRequest</code>\u7B49\uFF0C\u4ED6\u4EEC\u7684\u4F7F\u7528\u65B9\u6CD5\u90FD\u662F\u4E00\u6837\u7684\uFF0C\u8FD9\u91CC\u5C31\u4E0D\u518D\u8BF4\u660E\u4E86\u3002\u5F53\u7136<code>Volley</code>\u91CC\u9762\u8FD8\u63D0\u4F9B\u4E86\u5BF9\u56FE\u7247\u7684\u5904\u7406\uFF0C\u4F8B\u5982<code>NetworkImageView</code>\u7A7A\u95F4\u548C<code>ImageRequest</code>\u7B49\uFF0C\u56E0\u4E3A\u8FD9\u91CC\u56FE\u7247\u7528\u5230\u7684\u4E0D\u592A\u591A\uFF0C\u6240\u4EE5\u6682\u65F6\u4E0D\u53BB\u5206\u6790\u4E86\u3002</p><p>\u63A5\u4E0B\u6765\u6211\u4EEC\u5C31\u4ECE\u6E90\u7801\u7684\u89D2\u5EA6\u53BB\u5206\u6790\u4E00\u4E0B\uFF1A<br> \u8FD9\u91CC\u6211\u4EEC\u90FD\u77E5\u9053\u4F7F\u7528\u7684\u65F6\u5019\u6700\u65B0\u8981\u521D\u59CB\u5316\u4E00\u4E2A<code>RequestQueue</code>\u6240\u4EE5\uFF0C\u6211\u4EEC\u9996\u5148\u770B\u4E00\u4E0B<code>Volley.newRequestQueue</code>\u65B9\u6CD5\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Volley</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** Default on-disk cache directory. */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEFAULT_CACHE_DIR <span class="token operator">=</span> <span class="token string">&quot;volley&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Creates a default instance of the worker pool and calls <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> on it.
     * You may set a maximum size of the disk cache in bytes.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Context</span></span><span class="token punctuation">}</span> to use for creating the cache dir.
     * <span class="token keyword">@param</span> <span class="token parameter">stack</span> An <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">HttpStack</span></span><span class="token punctuation">}</span> to use for the network, or null for default.
     * <span class="token keyword">@param</span> <span class="token parameter">maxDiskCacheBytes</span> the maximum size of the disk cache, in bytes. Use -1 for default size.
     * <span class="token keyword">@return</span> A started <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span></span><span class="token punctuation">}</span> instance.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RequestQueue</span> <span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">HttpStack</span> stack<span class="token punctuation">,</span> <span class="token keyword">int</span> maxDiskCacheBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> cacheDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCacheDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DEFAULT_CACHE_DIR<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> userAgent <span class="token operator">=</span> <span class="token string">&quot;volley/0&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> packageName <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PackageInfo</span> info <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u4F7F\u7528\u5305\u540D\u548CversionCode\u4F5C\u4E3AuserAgent</span>
            userAgent <span class="token operator">=</span> packageName <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>versionCode<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">&gt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u57289\u53CA\u4EE5\u4E0AVolleys\u4F7F\u7528HttpURLConnection\uFF0C9\u4E00\u4E0B\u4F7F\u7528HttpClient\u3002\u8FD9\u91CC\u662F\u6709\u539F\u56E0\u7684\uFF0C\u56E0\u4E3A\u57289\u4E4B\u524DHttpURLConnection\u6709Bug\u3002</span>
                <span class="token comment">// \u90A3HttpClient\u90A3\u4E48\u597D\u4E3A\u4EC0\u4E48\u4E0D\u4E00\u76F4\u4F7F\u7528\u5B83\uFF0C\u8981\u57289\u53CA\u4EE5\u540E\u4F7F\u7528HttpURLConnection\u5462\uFF1F\u8FD9\u91CC\u4E5F\u662F\u6709\u539F\u56E0\u7684\u3002\u4ECE9\u5F00\u59CBHttpURLConnection</span>
                <span class="token comment">// \u5C06\u81EA\u52A8\u6DFB\u52A0\`Accept-Encoding:gzip\`\u5934\u5B57\u6BB5\u5230\`request\`\u8BF7\u6C42\u4E2D\uFF0C\u5E76\u505A\u76F8\u5E94\u5904\u7406\uFF0C\u4E00\u822C\u6211\u4EEC\u8BF7\u6C42\u90FD\u662F\u5B57\u7B26\u4E32\uFF0C\u6240\u4EE5\u538B\u7F29\u53EF\u4EE5\u4F7F\u6570\u636E\u5927\u5C0F\u5927\u5E45\u964D\u4F4E\u3002</span>
                <span class="token comment">// \u4F46\u662F\u8FD9\u4E5F\u4F1A\u5E26\u6765\u95EE\u9898\u7684\uFF0C\u4E4B\u524D\u5F00\u53D1\u4E2D\u5C31\u9047\u5230\u8FC7\u3002\u56E0\u4E3A\u542F\u7528\u4E86\u538B\u7F29\uFF0C\u6240\u4EE5\`Content-Lenght\`\u5B57\u6BB5\u8FD4\u56DE\u7684\u662F\u538B\u7F29\u540E\u7684\u5927\u5C0F\u3002\u4F7F\u7528\`getContentLength()\`</span>
                <span class="token comment">// \u65B9\u6CD5\u53BB\u5206\u914D\u89E3\u538B\u7F29\u540E\u6570\u636E\u5927\u5C0F\u662F\u9519\u8BEF\u7684\u3002\u5E94\u8BE5\u4ECEresponse\u4E2D\u8BFB\u53D6\u5B57\u8282\u76F4\u5230\`InputStream.read()\`\u8FD4\u56DE-1\u4E3A\u6B62\u3002\u5F53\u65F6\u6211\u4EEC\u5728\u5F00\u53D1\u4E0B\u8F7D\u65F6\u5C31\u9047\u5230\u8FC7\u8FD9\u4E2A</span>
                <span class="token comment">// \u95EE\u9898\uFF0C\u5728\u4E0B\u8F7D\u89C6\u9891\u65F6\u6CA1\u6709\u95EE\u9898\uFF0C\u4F46\u662F\u5728\u4E0B\u8F7D\u5C0F\u8BF4\u7684\u65F6\u5019\u5C31\u4F1A\u53D1\u73B0\`content-length\`\u8FD4\u56DE\u503C\u4E0D\u5BF9\u3002</span>
                <span class="token comment">// \u603B\u7ED3\u4E00\u4E0B\u5C31\u662F\u57289\u4E4B\u524DHttpClient\u7684bug\u66F4\u5C11\uFF0C\u800CHttpURLConnection\u5B58\u5728\u4E25\u91CD\u7684Bug\u3002\u4F46\u662F\u4ECE9\u5F00\u59CBHttpURLConnection\u66F4\u5C0F\u5DE7\uFF0CAPI\u66F4\u7B80\u5355\uFF0C\u538B\u7F29\u4EE5\u53CA</span>
                <span class="token comment">// response cache\u7684\u4F7F\u7528\u51CF\u5C11\u4E86\u7F51\u7EDC\u6D41\u91CF\uFF0C\u63D0\u9AD8\u4E86\u7F51\u7EDC\u901F\u5EA6\uFF0C\u4E5F\u5C31\u66F4\u7701\u7535\uFF0C\u6240\u4EE5\u66F4\u9002\u5408\u5728Android\u4E2D\u4F7F\u7528</span>
                stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HurlStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// Prior to Gingerbread, HttpUrlConnection was unreliable.</span>
                <span class="token comment">// See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html</span>
                stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClientStack</span><span class="token punctuation">(</span><span class="token class-name">AndroidHttpClient</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u521B\u5EFABasicNetwork\u5BF9\u8C61\uFF0C\u4E0B\u9762\u4F1A\u4ECB\u7ECDBasicNetwork(HttpStack)\u65B9\u6CD5\u7684\u5185\u90E8\u5B9E\u73B0</span>
        <span class="token class-name">Network</span> network <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicNetwork</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">RequestQueue</span> queue<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxDiskCacheBytes <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
                <span class="token comment">// \u5982\u679C\u4E0D\u6307\u5B9A\u5927\u5C0F\u7684\u8BDD\uFF0C\u9ED8\u8BA4\u5927\u5C0F\u4E3A5M</span>
            <span class="token comment">// No maximum size specified</span>
        	queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DiskBasedCache</span><span class="token punctuation">(</span>cacheDir<span class="token punctuation">)</span><span class="token punctuation">,</span> network<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
        	<span class="token comment">// Disk cache size specified</span>
        	queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DiskBasedCache</span><span class="token punctuation">(</span>cacheDir<span class="token punctuation">,</span> maxDiskCacheBytes<span class="token punctuation">)</span><span class="token punctuation">,</span> network<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        queue<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * Creates a default instance of the worker pool and calls <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> on it.
     * You may set a maximum size of the disk cache in bytes.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Context</span></span><span class="token punctuation">}</span> to use for creating the cache dir.
     * <span class="token keyword">@param</span> <span class="token parameter">maxDiskCacheBytes</span> the maximum size of the disk cache, in bytes. Use -1 for default size.
     * <span class="token keyword">@return</span> A started <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span></span><span class="token punctuation">}</span> instance.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RequestQueue</span> <span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> maxDiskCacheBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">newRequestQueue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> maxDiskCacheBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * Creates a default instance of the worker pool and calls <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> on it.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Context</span></span><span class="token punctuation">}</span> to use for creating the cache dir.
     * <span class="token keyword">@param</span> <span class="token parameter">stack</span> An <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">HttpStack</span></span><span class="token punctuation">}</span> to use for the network, or null for default.
     * <span class="token keyword">@return</span> A started <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span></span><span class="token punctuation">}</span> instance.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RequestQueue</span> <span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">HttpStack</span> stack<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> <span class="token function">newRequestQueue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> stack<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * Creates a default instance of the worker pool and calls <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> on it.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> A <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Context</span></span><span class="token punctuation">}</span> to use for creating the cache dir.
     * <span class="token keyword">@return</span> A started <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span></span><span class="token punctuation">}</span> instance.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RequestQueue</span> <span class="token function">newRequestQueue</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">newRequestQueue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u6765\u770B\u4E00\u4E0A\u4E0A\u9762\u63D0\u5230\u7684new BasicNetwork(HttpStack)\u65B9\u6CD5\u7684\u5B9E\u73B0,\u53EF\u4EE5\u770B\u5230\u4ED6\u5185\u90E8\u7684\u7F13\u5B58\u5927\u5C0F\u662F4k</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DEFAULT_POOL_SIZE <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>

<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">HttpStack</span> mHttpStack<span class="token punctuation">;</span>

<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ByteArrayPool</span> mPool<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">httpStack</span> HTTP stack to be used
 */</span>
<span class="token keyword">public</span> <span class="token class-name">BasicNetwork</span><span class="token punctuation">(</span><span class="token class-name">HttpStack</span> httpStack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If a pool isn&#39;t passed in, then build a small default pool that will give us a lot of</span>
    <span class="token comment">// benefit and not use too much memory.</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>httpStack<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayPool</span><span class="token punctuation">(</span>DEFAULT_POOL_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">httpStack</span> HTTP stack to be used
 * <span class="token keyword">@param</span> <span class="token parameter">pool</span> a buffer pool that improves GC performance in copy operations
 */</span>
<span class="token keyword">public</span> <span class="token class-name">BasicNetwork</span><span class="token punctuation">(</span><span class="token class-name">HttpStack</span> httpStack<span class="token punctuation">,</span> <span class="token class-name">ByteArrayPool</span> pool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mHttpStack <span class="token operator">=</span> httpStack<span class="token punctuation">;</span>
    mPool <span class="token operator">=</span> pool<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u6211\u4EEC\u8FD8\u8981\u5206\u6790\u4E00\u4E0B<code>RequestQueue</code>\u7684\u6784\u9020\u65B9\u6CD5\u4EE5\u53CA<code>start()</code>\u65B9\u6CD5:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * A request dispatch queue with a thread pool of dispatchers.
 *
 * Calling <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> will enqueue the given Request for dispatch,
 * resolving from either cache or network on a worker thread, and then delivering
 * a parsed response on the main thread.
 */</span><span class="token doc-comment comment">/**
 * A request dispatch queue with a thread pool of dispatchers.
 *
 * Calling <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> will enqueue the given Request for dispatch,
 * resolving from either cache or network on a worker thread, and then delivering
 * a parsed response on the main thread.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestQueue</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** Used for generating monotonically-increasing sequence numbers for requests. */</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> mSequenceGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Staging area for requests that already have a duplicate request in flight.
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
     *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>containsKey(cacheKey) indicates that there is a request in flight for the given cache
     *          key.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
     *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>get(cacheKey) returns waiting requests for the given cache key. The in flight request
     *          is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>not<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> contained in that list. Is null if no requests are staged.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Queue</span><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mWaitingRequests <span class="token operator">=</span>
            <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Queue</span><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The set of all requests currently being processed by this RequestQueue. A Request
     * will be in this set if it is waiting in any queue or currently being processed by
     * any dispatcher.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mCurrentRequests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// cache\u961F\u5217</span>
    <span class="token doc-comment comment">/** The cache triage queue. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mCacheQueue <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// \u7F51\u7EDC\u8BF7\u6C42\u961F\u5217</span>
    <span class="token doc-comment comment">/** The queue of requests that are actually going out to the network. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mNetworkQueue <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Number of network request dispatcher threads to start. */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_NETWORK_THREAD_POOL_SIZE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Cache interface for retrieving and storing responses. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Cache</span> mCache<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Network interface for performing requests. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Network</span> mNetwork<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Response delivery mechanism. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ResponseDelivery</span> mDelivery<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** The network dispatchers. */</span>
    <span class="token keyword">private</span> <span class="token class-name">NetworkDispatcher</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mDispatchers<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** The cache dispatcher. */</span>
    <span class="token keyword">private</span> <span class="token class-name">CacheDispatcher</span> mCacheDispatcher<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Creates the worker pool. Processing will not begin until <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is called.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">cache</span> A Cache to use for persisting responses to disk
     * <span class="token keyword">@param</span> <span class="token parameter">network</span> A Network interface for performing HTTP requests
     * <span class="token keyword">@param</span> <span class="token parameter">threadPoolSize</span> Number of network dispatcher threads to create
     * <span class="token keyword">@param</span> <span class="token parameter">delivery</span> A ResponseDelivery interface for posting responses and errors
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">RequestQueue</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">,</span> <span class="token class-name">Network</span> network<span class="token punctuation">,</span> <span class="token keyword">int</span> threadPoolSize<span class="token punctuation">,</span>
            <span class="token class-name">ResponseDelivery</span> delivery<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mCache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
        mNetwork <span class="token operator">=</span> network<span class="token punctuation">;</span>
        mDispatchers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NetworkDispatcher</span><span class="token punctuation">[</span>threadPoolSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
        mDelivery <span class="token operator">=</span> delivery<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Creates the worker pool. Processing will not begin until <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is called.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">cache</span> A Cache to use for persisting responses to disk
     * <span class="token keyword">@param</span> <span class="token parameter">network</span> A Network interface for performing HTTP requests
     * <span class="token keyword">@param</span> <span class="token parameter">threadPoolSize</span> Number of network dispatcher threads to create
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">RequestQueue</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">,</span> <span class="token class-name">Network</span> network<span class="token punctuation">,</span> <span class="token keyword">int</span> threadPoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> network<span class="token punctuation">,</span> threadPoolSize<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ExecutorDelivery</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Creates the worker pool. Processing will not begin until <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is called.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">cache</span> A Cache to use for persisting responses to disk
     * <span class="token keyword">@param</span> <span class="token parameter">network</span> A Network interface for performing HTTP requests
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">RequestQueue</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">,</span> <span class="token class-name">Network</span> network<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u9ED8\u8BA4\u5927\u5C0F\u4E3A4</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> network<span class="token punctuation">,</span> DEFAULT_NETWORK_THREAD_POOL_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Starts the dispatchers in this queue.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Make sure any currently running dispatchers are stopped.</span>
        <span class="token comment">// Create the cache dispatcher and start it.</span>
        <span class="token comment">// \u521D\u59CB\u5316RequestQueue\u4E4B\u540E\u5C31\u4F1A\u8C03\u7528start\u65B9\u6CD5\uFF0C\u5185\u90E8\u4F1A\u5F00\u542FCacheDispatcher,\u4E5F\u662FThread\u7684\u5B50\u7C7B\uFF0C\u540E\u9762\u518D\u770B\u91CC\u9762\u5177\u4F53\u7684run\u65B9\u6CD5</span>
        mCacheDispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheDispatcher</span><span class="token punctuation">(</span>mCacheQueue<span class="token punctuation">,</span> mNetworkQueue<span class="token punctuation">,</span> mCache<span class="token punctuation">,</span> mDelivery<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mCacheDispatcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Create network dispatchers (and corresponding threads) up to the pool size.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mDispatchers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u521B\u5EFA4\u4E2A(\u9ED8\u8BA4\u662F4\u4E2A)NetworkDispatcher\u4E00\u76F4\u53BB\u6267\u884C, NetworkDispatcher\u662FThread\u7684\u5B50\u7C7B\uFF0C\u4ED6\u4F1A\u4E0D\u65AD\u7684\u53BB\u4ECEmNetworkQueue\u4E2D\u53D6\u51FARequet\u5E76\u7528</span>
            <span class="token comment">// \u5E76\u7528mNetwork\u53BB\u6267\u884C\uFF0C\u6267\u884C\u5B8C\u6210\u540E\u518D\u4F7F\u7528mDelivery\u53BB\u5206\u53D1\u76F8\u5E94\u7684\u7ED3\u679C</span>
            <span class="token class-name">NetworkDispatcher</span> networkDispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NetworkDispatcher</span><span class="token punctuation">(</span>mNetworkQueue<span class="token punctuation">,</span> mNetwork<span class="token punctuation">,</span>
                    mCache<span class="token punctuation">,</span> mDelivery<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mDispatchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> networkDispatcher<span class="token punctuation">;</span>
            networkDispatcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5C31\u597D\u50CF\u4E00\u4E2A\u5DE5\u5382\u4E00\u542F\u52A8\uFF0C\u91CC\u9762\u5C31\u5206\u914D\u4E865\u4E2A\u642C\u8FD0\u5DE5\uFF0C\u4E00\u4E2A\u8D1F\u8D23\u642C\u8FD0cache\u91CC\u9762\u7684\u7684\u8BF7\u6C42\uFF0C4\u4E2A\u8D1F\u8D23\u642C\u8FD0network\u4E2D\u7684\u3002\u542F\u52A8\u540E\u4ED6\u4EEC\u5C31\u5F00\u59CB\u5F85\u547D</span>
        <span class="token comment">// \u4E00\u65E6\u6709\u6D3B\u6765\u4E86\uFF0C\u5C31\u5F00\u59CB\u53BB\u53D6\u51FA\u6D3B\u5F00\u59CB\u5E72\u3002</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Stops the cache and network dispatchers.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mCacheDispatcher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mCacheDispatcher<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mDispatchers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mDispatchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mDispatchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Gets a sequence number.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSequenceNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mSequenceGenerator<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Gets the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Cache</span></span><span class="token punctuation">}</span> instance being used.
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Cache</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mCache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * A simple predicate or filter interface for Requests, for use by
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RequestQueue</span><span class="token punctuation">#</span><span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token class-name">RequestFilter</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RequestFilter</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Cancels all requests in this queue for which the given filter applies.
     * <span class="token keyword">@param</span> <span class="token parameter">filter</span> The filtering function to use
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token class-name">RequestFilter</span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mCurrentRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request <span class="token operator">:</span> mCurrentRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    request<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Cancels all requests in this queue with the given tag. Tag must be non-null
     * and equality is by identity.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot cancelAll with a null tag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> tag<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Adds a Request to the dispatch queue.
     * <span class="token keyword">@param</span> <span class="token parameter">request</span> The request to service
     * <span class="token keyword">@return</span> The passed-in request
     */</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Tag the request as belonging to this queue and add it to the set of current requests.</span>
        request<span class="token punctuation">.</span><span class="token function">setRequestQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mCurrentRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6DFB\u52A0\u5230mCurrentRequests\u4E2D\uFF0C\u5728\u6267\u884C\u5B8C\u540E\u7684finish\u65B9\u6CD5\u4E2D\u4F1A\u53BB\u79FB\u9664\u8BE5\u8BF7\u6C42\u3002</span>
            mCurrentRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Process requests in the order they are added.</span>
        request<span class="token punctuation">.</span><span class="token function">setSequence</span><span class="token punctuation">(</span><span class="token function">getSequenceNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;add-to-queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u5224\u65AD\u4E00\u4E0B\u8BE5\u8BF7\u6C42\u80FD\u5426\u8FDB\u884C\u7F13\u5B58\uFF0C\u5982\u679C\u4E0D\u80FD\u7F13\u5B58\u5C31\u76F4\u63A5\u6DFB\u52A0\u5230\u7F51\u7EDC\u8BF7\u6C42\u7684\u961F\u5217\u4E2D\u3002\u8FD9\u4E2A\u80FD\u4E0D\u80FD\u7F13\u5B58\u662F\u600E\u4E48\u5224\u65AD\u7684\uFF1F\u5176\u5B9E\u5C31\u662F\u6839\u636ERequest\u4E2D\u7684\u4E00\u4E2A\u53D8\u91CF\u6765\u5224\u65AD\u3002</span>
\u3000\u3000\u3000\u3000<span class="token comment">// \u9ED8\u8BA4\u60C5\u51B5\u4E0B\u6240\u6709\u7684\u8BF7\u6C42\u90FD\u662F\u53EF\u4EE5\u7F13\u5B58\u7684\uFF0C\u53EF\u4EE5\u901A\u8FC7Request.setShouldCache(false)\u65B9\u6CD5\uFF0C\u6765\u5C06\u5176\u8BBE\u7F6E\u4E3A\u4E0D\u53EF\u7F13\u5B58\u72B6\u6001\u3002</span>
        <span class="token comment">// If the request is uncacheable, skip the cache queue and go straight to the network.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">shouldCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mNetworkQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> request<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Insert request into stage if there&#39;s already a request with the same cache key in flight.</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mWaitingRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mWaitingRequests<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// There is already a request in flight. Queue up.</span>
                <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stagedRequests <span class="token operator">=</span> mWaitingRequests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>stagedRequests <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    stagedRequests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                stagedRequests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                mWaitingRequests<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> stagedRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">VolleyLog</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">VolleyLog</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">&quot;Request for cacheKey=%s is in flight, putting on hold.&quot;</span><span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u5982\u679C\u80FD\u7F13\u5B58\uFF0C\u5E76\u4E14\u7F13\u5B58\u7EBF\u7A0B\u4E2D\u6CA1\u6709\u7684\u65F6\u5019\u5C31\u8BB2\u8BE5\u8BF7\u6C42\u6DFB\u52A0\u5230\u7F13\u5B58\u961F\u5217\u4E2D</span>
                <span class="token comment">// Insert &#39;null&#39; queue for this cacheKey, indicating there is now a request in</span>
                <span class="token comment">// flight.</span>
                mWaitingRequests<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mCacheQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> request<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Called from <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Request</span><span class="token punctuation">#</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>, indicating that processing of the given request
     * has finished.
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Releases waiting requests for <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">request<span class="token punctuation">.</span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> if
     *      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">request<span class="token punctuation">.</span><span class="token function">shouldCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Remove from the set of requests currently being processed.</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mCurrentRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mCurrentRequests<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">shouldCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mWaitingRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> waitingRequests <span class="token operator">=</span> mWaitingRequests<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitingRequests <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">VolleyLog</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">VolleyLog</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">&quot;Releasing %d waiting requests for cacheKey=%s.&quot;</span><span class="token punctuation">,</span>
                                waitingRequests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// Process all queued up requests. They won&#39;t be considered as in flight, but</span>
                    <span class="token comment">// that&#39;s not a problem as the cache has been primed by &#39;request&#39;.</span>
                    mCacheQueue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>waitingRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u770B\u5230\u8FD9\u91CC\u57FA\u672C\u90FD\u80FD\u770B\u7684\u5DEE\u4E0D\u591A\u4E86\u3002\u5B98\u65B9\u6587\u6863\u4E2D\u6709\u53E5\u8BDD\u8BF4\u7684\u5F88\u597D\uFF0C\u8FD9\u91CC\u7528\u4ED6\u6765\u603B\u7ED3\u4E00\u4E0B<code>A RequestQueue needs two things to do its job: a network to perform transport of the requests, and a cache to handle caching. </code> \u987A\u4FBF\u518D\u4E0A\u4E00\u5F20\u56FE:</p><p><img src="https://raw.githubusercontent.com/CharonChui/Pictures/master/volley-request.png?raw=true" alt="image"></p><p>\u603B\u7ED3\u5B8C\u4E4B\u540E\u6211\u4EEC\u63A5\u7740\u8FDB\u884C\u5206\u6790\u3002\u56E0\u4E3A\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u8BF7\u6C42\u90FD\u662F\u53EF\u7F13\u5B58\u7684\uFF0C\u6240\u4EE5\u90FD\u4F1A\u88AB\u6DFB\u52A0\u5230mCacheQueue\u4E2D\u3002\u6DFB\u52A0\u8BE5\u961F\u5217\u4E4B\u540E\uFF0C\u5C31\u4F1A\u88AB\u5F00\u59CB<code>start</code>\u65B9\u6CD5\u6240\u5236\u5B9A\u7684cache\u642C\u8FD0\u5DE5\u53BB\u6267\u884C\uFF0C\u6240\u4EE5\u6211\u4EEC\u8981\u770B\u4E00\u4E0BCacheDispatcher\u7684\u5B9E\u73B0\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Provides a thread for performing cache triage on a queue of requests.
 *
 * Requests added to the specified cache queue are resolved from cache.
 * Any deliverable response is posted back to the caller via a
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ResponseDelivery</span></span><span class="token punctuation">}</span>.  Cache misses and responses that require
 * refresh are enqueued on the specified network queue for processing
 * by a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">NetworkDispatcher</span></span><span class="token punctuation">}</span>.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheDispatcher</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> DEBUG <span class="token operator">=</span> <span class="token class-name">VolleyLog</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** The queue of requests coming in for triage. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mCacheQueue<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** The queue of requests going out to the network. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mNetworkQueue<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** The cache to read from. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Cache</span> mCache<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** For posting responses. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ResponseDelivery</span> mDelivery<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Used for telling us to die. */</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> mQuit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Creates a new cache triage dispatcher thread.  You must call <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * in order to begin processing.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">cacheQueue</span> Queue of incoming requests for triage
     * <span class="token keyword">@param</span> <span class="token parameter">networkQueue</span> Queue to post requests that require network to
     * <span class="token keyword">@param</span> <span class="token parameter">cache</span> Cache interface to use for resolution
     * <span class="token keyword">@param</span> <span class="token parameter">delivery</span> Delivery interface to use for posting responses
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">CacheDispatcher</span><span class="token punctuation">(</span>
            <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cacheQueue<span class="token punctuation">,</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> networkQueue<span class="token punctuation">,</span>
            <span class="token class-name">Cache</span> cache<span class="token punctuation">,</span> <span class="token class-name">ResponseDelivery</span> delivery<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5C06CacheQueue\u4EE5\u53CAnetworkQueue\u7B49\u4F20\u9012\u8FDB\u6765\u3002</span>
        mCacheQueue <span class="token operator">=</span> cacheQueue<span class="token punctuation">;</span>
        mNetworkQueue <span class="token operator">=</span> networkQueue<span class="token punctuation">;</span>
        mCache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
        mDelivery <span class="token operator">=</span> delivery<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Forces this dispatcher to quit immediately.  If any requests are still in
     * the queue, they are not guaranteed to be processed.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mQuit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> <span class="token class-name">VolleyLog</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string">&quot;start new dispatcher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span><span class="token class-name">Process</span><span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Make a blocking call to initialize the cache.</span>
    <span class="token doc-comment comment">/**
     * Performs any potentially long-running actions needed to initialize the cache;
     * will be called from a worker thread.
     */</span>
        mCache<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u4ECE\u7F13\u5B58\u961F\u5217\u4E2D\u53D6\u51FA\u7B2C\u4E00\u4E2A\u8BF7\u6C42</span>
                <span class="token comment">// Get a request from the cache triage queue, blocking until</span>
                <span class="token comment">// at least one is available.</span>
                <span class="token keyword">final</span> <span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request <span class="token operator">=</span> mCacheQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;cache-queue-take&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// If the request has been canceled, don&#39;t bother dispatching it.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    request<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token string">&quot;cache-discard-canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Attempt to retrieve this item from cache.</span>
                <span class="token class-name">Cache<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> mCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u5982\u679C\u7F13\u5B58\u4E2D\u627E\u4E0D\u5230\u8BE5\u8BF7\u6C42\uFF0C\u5C31\u628A\u8BE5\u8BF7\u6C42\u6DFB\u52A0\u5230\u7F51\u7EDC\u8BF7\u6C42\u961F\u5217\u4E2D\u3002</span>
                    request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;cache-miss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// Cache miss; send off to the network dispatcher.</span>
                    mNetworkQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u5982\u679C\u7F13\u5B58\u4E2D\u627E\u5230\u4E86\u8BE5\u8BF7\u6C42\uFF0C\u63A5\u4E0B\u6765\u5C31\u5224\u65AD\u8BE5\u7F13\u5B58\u662F\u5426\u8FC7\u671F\u3002</span>
                <span class="token comment">// If it is completely expired, just send it to the network.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u8FC7\u671F\u4E86\u4E5F\u91CD\u65B0\u6DFB\u52A0\u5230\u7F51\u7EDC\u8BF7\u6C42\u4E2D</span>
                    request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;cache-hit-expired&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    request<span class="token punctuation">.</span><span class="token function">setCacheEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mNetworkQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u6CA1\u6709\u8FC7\u671F\uFF0C\u5C31\u4E0D\u7528\u518D\u8BF7\u6C42\u4E86\uFF0C\u76F4\u63A5\u4ECE\u7F13\u5B58\u4E2D\u53D6\u51FA\u6570\u636E\u8FD4\u56DE\u5373\u53EF\u3002</span>
                <span class="token comment">// We have a cache hit; parse its data for delivery back to the request.</span>
                request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;cache-hit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u8FD9\u91CC\u7684\u610F\u601D\u5C31\u662F\u5BF9\u6570\u636E\u8FDB\u884C\u89E3\u6790\uFF0C\u540E\u9762\u518D\u770BRequest.parseNetworkResponse\u65B9\u6CD5\u3002</span>
                <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">parseNetworkResponse</span><span class="token punctuation">(</span>
                        <span class="token keyword">new</span> <span class="token class-name">NetworkResponse</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>data<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>responseHeaders<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;cache-hit-parsed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// \u5224\u65AD\u7F13\u5B58\u6570\u636E\u662F\u5426\u9700\u8981\u5237\u65B0\uFF0C\u4EE5\u4FBF\u4F7F\u7528mDelivery\u5206\u53D1\u7ED3\u679C\u6216\u8005\u6DFB\u52A0\u5230\u7F51\u7EDC\u8BF7\u6C42\u961F\u5217\u4E2D</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">.</span><span class="token function">refreshNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Completely unexpired cache hit. Just deliver the response.</span>
                    mDelivery<span class="token punctuation">.</span><span class="token function">postResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Soft-expired cache hit. We can deliver the cached response,</span>
                    <span class="token comment">// but we need to also send the request to the network for</span>
                    <span class="token comment">// refreshing.</span>
                    request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;cache-hit-refresh-needed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    request<span class="token punctuation">.</span><span class="token function">setCacheEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// Mark the response as intermediate.</span>
                    response<span class="token punctuation">.</span>intermediate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                    <span class="token comment">// Post the intermediate response back to the user and have</span>
                    <span class="token comment">// the delivery then forward the request along to the network.</span>
                    mDelivery<span class="token punctuation">.</span><span class="token function">postResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                mNetworkQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">// Not much we can do about this.</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// We may have been interrupted because it was time to quit.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u800C\u5BF9\u4E8E\u7F51\u7EDC\u8BF7\u6C42\u961F\u5217\u4E2D\u7684\u4EFB\u52A1\u8BE5\u5982\u4F55\u6267\u884C\uFF0C\u8FD9\u91CC\u5C31\u8981\u770B<code>NetworkDispatcher</code>\u7684\u5177\u4F53\u5B9E\u73B0:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Provides a thread for performing network dispatch from a queue of requests.
 *
 * Requests added to the specified queue are processed from the network via a
 * specified <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Network</span></span><span class="token punctuation">}</span> interface. Responses are committed to cache, if
 * eligible, using a specified <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Cache</span></span><span class="token punctuation">}</span> interface. Valid responses and
 * errors are posted back to the caller via a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ResponseDelivery</span></span><span class="token punctuation">}</span>.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NetworkDispatcher</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** The queue of requests to service. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mQueue<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** The network interface for processing requests. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Network</span> mNetwork<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** The cache to write to. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Cache</span> mCache<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** For posting responses and errors. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ResponseDelivery</span> mDelivery<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** Used for telling us to die. */</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> mQuit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Creates a new network dispatcher thread.  You must call <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * in order to begin processing.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">queue</span> Queue of incoming requests for triage
     * <span class="token keyword">@param</span> <span class="token parameter">network</span> Network interface to use for performing requests
     * <span class="token keyword">@param</span> <span class="token parameter">cache</span> Cache interface to use for writing responses to cache
     * <span class="token keyword">@param</span> <span class="token parameter">delivery</span> Delivery interface to use for posting responses
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">NetworkDispatcher</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> queue<span class="token punctuation">,</span>
            <span class="token class-name">Network</span> network<span class="token punctuation">,</span> <span class="token class-name">Cache</span> cache<span class="token punctuation">,</span>
            <span class="token class-name">ResponseDelivery</span> delivery<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
        mNetwork <span class="token operator">=</span> network<span class="token punctuation">;</span>
        mCache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
        mDelivery <span class="token operator">=</span> delivery<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Forces this dispatcher to quit immediately.  If any requests are still in
     * the queue, they are not guaranteed to be processed.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mQuit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>ICE_CREAM_SANDWICH<span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addTrafficStatsTag</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Tag the request (if API &gt;= 14)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">&gt;=</span> <span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>ICE_CREAM_SANDWICH<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TrafficStats</span><span class="token punctuation">.</span><span class="token function">setThreadStatsTag</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getTrafficStatsTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span><span class="token class-name">Process</span><span class="token punctuation">.</span>THREAD_PRIORITY_BACKGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> startTimeMs <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// Take a request from the queue.</span>
                request <span class="token operator">=</span> mQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// We may have been interrupted because it was time to quit.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;network-queue-take&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// If the request was cancelled already, do not perform the</span>
                <span class="token comment">// network request.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    request<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token string">&quot;network-discard-cancelled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token function">addTrafficStatsTag</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// mNetwork\u4F1A\u53BB\u6267\u884C\u5BF9\u5E94\u7684request\u8BF7\u6C42\uFF0C\u540E\u9762\u518D\u770B\u91CC\u9762\u7684\u5177\u4F53\u5B9E\u73B0</span>
                <span class="token comment">// Perform the network request.</span>
                <span class="token class-name">NetworkResponse</span> networkResponse <span class="token operator">=</span> mNetwork<span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;network-http-complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// If the server returned 304 AND we delivered a response already,</span>
                <span class="token comment">// we&#39;re done -- don&#39;t deliver a second identical response.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span>notModified <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">hasHadResponseDelivered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    request<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token string">&quot;not-modified&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u5C06\u7F51\u7EDC\u8BF7\u6C42\u8FD4\u56DE\u7684NetworkResponse\u4EA4\u7ED9request.parseNetworkResponse\u8FDB\u884C\u5904\u7406</span>
                <span class="token comment">// Parse the response here on the worker thread.</span>
                <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">parseNetworkResponse</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
                request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;network-parse-complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// Write to cache if applicable.</span>
                <span class="token comment">// TODO: Only update cache metadata instead of entire record for 304s.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">shouldCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>cacheEntry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>cacheEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;network-cache-written&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Post the response back.</span>
                request<span class="token punctuation">.</span><span class="token function">markDelivered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// mDelivery\u8FDB\u884C\u5206\u53D1</span>
                mDelivery<span class="token punctuation">.</span><span class="token function">postResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">VolleyError</span> volleyError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                volleyError<span class="token punctuation">.</span><span class="token function">setNetworkTimeMs</span><span class="token punctuation">(</span><span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">parseAndDeliverNetworkError</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> volleyError<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">VolleyLog</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">&quot;Unhandled exception %s&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">VolleyError</span> volleyError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolleyError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                volleyError<span class="token punctuation">.</span><span class="token function">setNetworkTimeMs</span><span class="token punctuation">(</span><span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                mDelivery<span class="token punctuation">.</span><span class="token function">postError</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> volleyError<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseAndDeliverNetworkError</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name">VolleyError</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        error <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">parseNetworkError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mDelivery<span class="token punctuation">.</span><span class="token function">postError</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4F1A\u6267\u884C\u5230<code>mNetwork.performRequest</code>\u65B9\u6CD5\uFF0C\u800C<code>Network</code>\u662F\u4E00\u4E2A\u63A5\u53E3\uFF0C\u5177\u4F53\u7684\u5B9E\u73B0\u8981\u770B<code>BaseNetwork</code>\u4E2D\u7684\u5B9E\u73B0\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">NetworkResponse</span> <span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">VolleyError</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> requestStart <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">HttpResponse</span> httpResponse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseContents <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseHeaders <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// Gather headers.</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">addCacheHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getCacheEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u8C03\u7528mHttpStack.performRequest\u65B9\u6CD5\uFF0C\u8FD9\u91CC\u5C31\u662FnewRequestQueue\u4E2D\u521B\u5EFA\u7684\u90E8\u5206\uFF0C9\u53CA\u4EE5\u4E0A\u4E3AHurlStack\uFF0C9\u4EE5\u4E0B\u4E3AHttpClientStach,\u5177\u4F53\u5C31\u662F\u771F\u6B63\u6267\u884C\u7F51\u7EDC\u8BF7\u6C42\u7684\u90E8\u5206\u4E86\u3002</span>
                httpResponse <span class="token operator">=</span> mHttpStack<span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">StatusLine</span> statusLine <span class="token operator">=</span> httpResponse<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> statusCode <span class="token operator">=</span> statusLine<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                responseHeaders <span class="token operator">=</span> <span class="token function">convertHeaders</span><span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getAllHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// Handle cache validation.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_NOT_MODIFIED<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCacheEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NetworkResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_NOT_MODIFIED<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                                responseHeaders<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                                <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> requestStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// A HTTP 304 response does not have all header fields. We</span>
                    <span class="token comment">// have to use the header fields from the cache entry plus</span>
                    <span class="token comment">// the new ones from the response.</span>
                    <span class="token comment">// http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5</span>
                    entry<span class="token punctuation">.</span>responseHeaders<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>responseHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NetworkResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_NOT_MODIFIED<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>data<span class="token punctuation">,</span>
                            entry<span class="token punctuation">.</span>responseHeaders<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                            <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> requestStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                
                <span class="token comment">// Handle moved resources</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_MOVED_PERMANENTLY <span class="token operator">||</span> statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_MOVED_TEMPORARILY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                	<span class="token class-name">String</span> newUrl <span class="token operator">=</span> responseHeaders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                	request<span class="token punctuation">.</span><span class="token function">setRedirectUrl</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// Some responses such as 204s do not have content.  We must check.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  responseContents <span class="token operator">=</span> <span class="token function">entityToBytes</span><span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                  <span class="token comment">// Add 0 byte response as a way of honestly representing a</span>
                  <span class="token comment">// no-content request.</span>
                  responseContents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// if the request is slow, log it.</span>
                <span class="token keyword">long</span> requestLifetime <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> requestStart<span class="token punctuation">;</span>
                <span class="token function">logSlowRequests</span><span class="token punctuation">(</span>requestLifetime<span class="token punctuation">,</span> request<span class="token punctuation">,</span> responseContents<span class="token punctuation">,</span> statusLine<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token operator">||</span> statusCode <span class="token operator">&gt;</span> <span class="token number">299</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NetworkResponse</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">,</span> responseContents<span class="token punctuation">,</span> responseHeaders<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                        <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> requestStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketTimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">attemptRetryOnException</span><span class="token punctuation">(</span><span class="token string">&quot;socket&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConnectTimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">attemptRetryOnException</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Bad URL &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> statusCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token class-name">NetworkResponse</span> networkResponse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponse <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    statusCode <span class="token operator">=</span> httpResponse<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoConnectionError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_MOVED_PERMANENTLY <span class="token operator">||</span> 
                		statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_MOVED_TEMPORARILY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                	<span class="token class-name">VolleyLog</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">&quot;Request at %s has been redirected to %s&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getOriginUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                	<span class="token class-name">VolleyLog</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected response code %d for %s&quot;</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>responseContents <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    networkResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NetworkResponse</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">,</span> responseContents<span class="token punctuation">,</span>
                            responseHeaders<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> requestStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_UNAUTHORIZED <span class="token operator">||</span>
                            statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_FORBIDDEN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">attemptRetryOnException</span><span class="token punctuation">(</span><span class="token string">&quot;auth&quot;</span><span class="token punctuation">,</span>
                                request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AuthFailureError</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_MOVED_PERMANENTLY <span class="token operator">||</span> 
                    			statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>SC_MOVED_TEMPORARILY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">attemptRetryOnException</span><span class="token punctuation">(</span><span class="token string">&quot;redirect&quot;</span><span class="token punctuation">,</span>
                                request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AuthFailureError</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// TODO: Only throw ServerError for 5xx status codes.</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServerError</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NetworkError</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u8C03\u7528\u4E86mHttpStack.performRequest\u7684\u65B9\u6CD5\uFF0C\u8FD9\u91CC\u5C31\u4EE59\u53CA\u4EE5\u4E0A\u7684HurlStack\u7C7B\u6765\u770B\u4E0B\u6E90\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">HttpResponse</span> <span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> additionalHeaders<span class="token punctuation">)</span>
		<span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">AuthFailureError</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>additionalHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>mUrlRewriter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> rewritten <span class="token operator">=</span> mUrlRewriter<span class="token punctuation">.</span><span class="token function">rewriteUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>rewritten <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;URL blocked by rewriter: &quot;</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		url <span class="token operator">=</span> rewritten<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">URL</span> parsedUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">HttpURLConnection</span> connection <span class="token operator">=</span> <span class="token function">openConnection</span><span class="token punctuation">(</span>parsedUrl<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> headerName <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		connection<span class="token punctuation">.</span><span class="token function">addRequestProperty</span><span class="token punctuation">(</span>headerName<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>headerName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">setConnectionParametersForRequest</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Initialize HttpResponse with data from the HttpURLConnection.</span>
	<span class="token class-name">ProtocolVersion</span> protocolVersion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolVersion</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> responseCode <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>responseCode <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// -1 is returned by getResponseCode() if the response code could not be retrieved.</span>
		<span class="token comment">// Signal to the caller that something was wrong with the connection.</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not retrieve response code from HttpUrlConnection.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">StatusLine</span> responseStatus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicStatusLine</span><span class="token punctuation">(</span>protocolVersion<span class="token punctuation">,</span>
			connection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> connection<span class="token punctuation">.</span><span class="token function">getResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">BasicHttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicHttpResponse</span><span class="token punctuation">(</span>responseStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
	response<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token function">entityFromConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> header <span class="token operator">:</span> connection<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">Header</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> response<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u4E0B\u6765\u8FD8\u8981\u770B\u4E00\u4E0B<code>mDelivery.postResponse(request, response);</code>\u8FD9\u91CC\u7684,mDelivery\u5C31\u662F<code>new ExecutorDelivery(new Handler(Looper.getMainLooper()))</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Delivers responses and errors.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorDelivery</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseDelivery</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** Used for posting responses, typically to the main thread. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> mResponsePoster<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Creates a new response delivery interface.
     * <span class="token keyword">@param</span> <span class="token parameter">handler</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Handler</span></span><span class="token punctuation">}</span> to post responses on
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ExecutorDelivery</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Handler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Make an Executor that just wraps the handler.</span>
        mResponsePoster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                handler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Creates a new response delivery interface, mockable version
     * for testing.
     * <span class="token keyword">@param</span> <span class="token parameter">executor</span> For running delivery tasks
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ExecutorDelivery</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mResponsePoster <span class="token operator">=</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postResponse</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">postResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postResponse</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> response<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        request<span class="token punctuation">.</span><span class="token function">markDelivered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;post-response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5185\u90E8\u4F1A\u8C03\u7528execute\u65B9\u6CD5</span>
        mResponsePoster<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResponseDeliveryRunnable</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postError</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name">VolleyError</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        request<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;post-error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mResponsePoster<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResponseDeliveryRunnable</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * A Runnable used for delivering network responses to a listener on the
     * main thread.
     */</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;rawtypes&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDeliveryRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Request</span> mRequest<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Response</span> mResponse<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> mRunnable<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ResponseDeliveryRunnable</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>
            mResponse <span class="token operator">=</span> response<span class="token punctuation">;</span>
            mRunnable <span class="token operator">=</span> runnable<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8FD9\u91CC\u5C31\u662F\u91CD\u70B9\u90E8\u5206\u4E86</span>
            <span class="token comment">// If this request has canceled, finish it and don&#39;t deliver.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mRequest<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mRequest<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token string">&quot;canceled-at-delivery&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u8C03\u7528mRequest\u7684deliverResponse\u6216\u8005deliverError\u8FDB\u884C\u5206\u53D1</span>
            <span class="token comment">// Deliver a normal response or error, depending.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mResponse<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mRequest<span class="token punctuation">.</span><span class="token function">deliverResponse</span><span class="token punctuation">(</span>mResponse<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                mRequest<span class="token punctuation">.</span><span class="token function">deliverError</span><span class="token punctuation">(</span>mResponse<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// If this is an intermediate response, add a marker, otherwise we&#39;re done</span>
            <span class="token comment">// and the request can be finished.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mResponse<span class="token punctuation">.</span>intermediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mRequest<span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token string">&quot;intermediate-response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6267\u884Cfinish\u65B9\u6CD5</span>
                mRequest<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// If we have been provided a post-delivery runnable, run it.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mRunnable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mRunnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u518D\u770B\u4E00\u4E0BmRequest\u7684deliverResponse\u65B9\u6CD5\u3002<br> Request\u63A5\u53E3\u4E2D\u6CA1\u6709\u5B9E\u73B0\u8BE5\u65B9\u6CD5\uFF0C\u5177\u4F53\u6211\u4EEC\u4EE5StringRequest\u4E3A\u4F8B\u770B\u4E00\u4E0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * A canned request for retrieving the response body at a given URL as a String.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringRequest</span> <span class="token keyword">extends</span> <span class="token class-name">Request</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mListener<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Creates a new request with the given method.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">method</span> the request <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Method</span></span><span class="token punctuation">}</span> to use
     * <span class="token keyword">@param</span> <span class="token parameter">url</span> URL to fetch the string at
     * <span class="token keyword">@param</span> <span class="token parameter">listener</span> Listener to receive the String response
     * <span class="token keyword">@param</span> <span class="token parameter">errorListener</span> Error listener, or null to ignore errors
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">StringRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> method<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">,</span>
            <span class="token class-name">ErrorListener</span> errorListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> errorListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mListener <span class="token operator">=</span> listener<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Creates a new GET request.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">url</span> URL to fetch the string at
     * <span class="token keyword">@param</span> <span class="token parameter">listener</span> Listener to receive the String response
     * <span class="token keyword">@param</span> <span class="token parameter">errorListener</span> Error listener, or null to ignore errors
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">StringRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Listener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listener<span class="token punctuation">,</span> <span class="token class-name">ErrorListener</span> errorListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> url<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> errorListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">deliverResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u56DE\u8C03</span>
        mListener<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseNetworkResponse</span><span class="token punctuation">(</span><span class="token class-name">NetworkResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> parsed<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            parsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token class-name">HttpHeaderParser</span><span class="token punctuation">.</span><span class="token function">parseCharset</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>parsed<span class="token punctuation">,</span> <span class="token class-name">HttpHeaderParser</span><span class="token punctuation">.</span><span class="token function">parseCacheHeaders</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u770B\u4E00\u4E0BmRequest.finish\u65B9\u6CD5\u7684\u5B9E\u73B0:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Notifies the request queue that this request has finished (successfully or with error).
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Also dumps all events from this request&#39;s event log; for debugging.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mRequestQueue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5185\u90E8\u8C03\u7528\u4E86mRequestQueue\u7684finish\u65B9\u6CD5\uFF0C\u4E5F\u5C31\u662F\u628A\u8BF7\u6C42\u4ECE\u8BF7\u6C42\u961F\u5217\u4E2D\u79FB\u9664\u3002</span>
        mRequestQueue<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MarkerLog</span><span class="token punctuation">.</span>ENABLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">long</span> threadId <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// If we finish marking off of the main thread, we need to</span>
            <span class="token comment">// actually do it on the main thread to ensure correct ordering.</span>
            <span class="token class-name">Handler</span> mainThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mainThread<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    mEventLog<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mEventLog<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        mEventLog<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mEventLog<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> requestTime <span class="token operator">=</span> <span class="token class-name">SystemClock</span><span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mRequestBirthTime<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestTime <span class="token operator">&gt;=</span> SLOW_REQUEST_THRESHOLD_MS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">VolleyLog</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;%d ms: %s&quot;</span><span class="token punctuation">,</span> requestTime<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u8FD9\u91CC\u5C31\u5168\u90E8\u5206\u6790\u5B8C\u4E86\u3002</p><hr><ul><li>\u90AE\u7BB1 \uFF1Acharon.chui@gmail.com</li><li>Good Luck!</li></ul>`,26);function S(E,D){const e=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[k,n("p",null,[n("a",r,[d,t(e)]),v,m]),b,n("p",null,[w,y,h,f,n("a",g,[q,t(e)])])]),R]),C])}var H=p(i,[["render",S],["__file","Volley\u6E90\u7801\u5206\u6790.html.vue"]]);export{H as default};
