import{_ as n,o as s,c as a,e as t}from"./app.89e8a229.js";const p={},e=t(`<h2 id="android-httpurlconnection\u6E90\u7801\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#android-httpurlconnection\u6E90\u7801\u5206\u6790" aria-hidden="true">#</a> Android HttpURLConnection\u6E90\u7801\u5206\u6790</h2><p>\u4E4B\u524D\u5199\u8FC7HttpURLConnection\u4E0EHttpClient\u7684\u533A\u522B\u53CA\u9009\u62E9\u3002\u540E\u6765\u53C8\u5206\u6790\u4E86Volley\u7684\u6E90\u7801\u3002 \u6700\u8FD1\u53C8\u9047\u5230\u4E86\u95EE\u9898\uFF0C\u60F3\u5728Volley\u4E2D\u9488\u5BF9HttpURLConnection\u6DFB\u52A0\u8FDE\u63A5\u6C60\u7684\u529F\u80FD\uFF0C\u5F00\u59CB\u6709\u70B9\u61F5\u4E86\uFF0C\u4E0D\u77E5\u9053HttpURLConnection\u8981\u600E\u4E48\u52A0\u8FDE\u63A5\u6C60\uFF0C \u867D\u7136\u611F\u89C9\u8FD9\u662F\u6CA1\u5FC5\u8981\u7684\uFF0C\u4F46\u662F\u5FC3\u5E95\u786E\u62FF\u4E0D\u51FA\u4F9D\u636E\u3002\u6240\u4EE5\u7814\u7A76\u4E0BHttpURLConnection\u7684\u6E90\u7801\u8FDB\u884C\u5206\u6790\u3002</p><p>\u5728\u4F7F\u7528\u7684\u65F6\u5019\u90FD\u662F\u901A\u8FC7URL.openConnection()\u6765\u83B7\u53D6<code>HttpURLConnection</code>\u5BF9\u8C61\uFF0C\u7136\u540E\u8C03\u7528\u5176<code>connect</code>\u65B9\u6CD5\u8FDB\u884C\u94FE\u63A5\uFF0C\u6240\u4EE5\u5148\u4ECE<code>URL.penConnection()</code>\u5165\u624B:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Returns a new connection to the resource referred to by this URL.
 *
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span> if an error occurs while opening the connection.
 */</span>
<span class="token keyword">public</span> <span class="token class-name">URLConnection</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> streamHandler<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u4E0B\u6765\u5C31\u8981\u770B\u4E00\u4E0B<code>streamHandler</code>\u7A76\u7ADF\u662F\u4F55\u65B9\u795E\u5723\uFF1F\u6211\u4EEC\u641C\u4E00\u4E0B\u4ED6\u7684\u8D4B\u503C\uFF0C\u5B9E\u5728<code>setupStreamHandler</code>\u65B9\u6CD5\u4E2D\u8FDB\u884C\u7684\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Sets the receiver&#39;s stream handler to one which is appropriate for its
 * protocol.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Note that this will overwrite any existing stream handler with the new
 * one. Senders must check if the streamHandler is null before calling the
 * method if they do not want this behavior (a speed optimization).
 *
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">MalformedURLException</span></span> if no reasonable handler is available.
 */</span>
<span class="token keyword">void</span> <span class="token function">setupStreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Check for a cached (previously looked up) handler for</span>
    <span class="token comment">// the requested protocol.</span>
    streamHandler <span class="token operator">=</span> streamHandlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>streamHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// If there is a stream handler factory, then attempt to</span>
    <span class="token comment">// use it to create the handler.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>streamHandlerFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        streamHandler <span class="token operator">=</span> streamHandlerFactory<span class="token punctuation">.</span><span class="token function">createURLStreamHandler</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>streamHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            streamHandlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> streamHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Check if there is a list of packages which can provide handlers.</span>
    <span class="token comment">// If so, then walk this list looking for an applicable one.</span>
    <span class="token class-name">String</span> packageList <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.protocol.handler.pkgs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassLoader</span> contextClassLoader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>packageList <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> contextClassLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> packageName <span class="token operator">:</span> packageList<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> className <span class="token operator">=</span> packageName <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> protocol <span class="token operator">+</span> <span class="token string">&quot;.Handler&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> contextClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                streamHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">URLStreamHandler</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>streamHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    streamHandlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> streamHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Fall back to a built-in stream handler if the user didn&#39;t supply one</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        streamHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;ftp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        streamHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FtpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5224\u65AD\u4E00\u4E0B\u5982\u679C\u662FHTTP\u534F\u8BAE\uFF0C\u5C31\u4F1A\u521B\u5EFAHtppHandler\u3002\u770B\u5230\u8FD9\u91CC\u660E\u767D\u4E86\uFF0C\u539F\u6765\u4F7F\u7528\u7684\u662Fokhttp.</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;com.android.okhttp.HttpHandler&quot;</span><span class="token punctuation">;</span>
            streamHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">URLStreamHandler</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;https&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;com.android.okhttp.HttpsHandler&quot;</span><span class="token punctuation">;</span>
            streamHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">URLStreamHandler</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;jar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        streamHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>streamHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        streamHandlers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> streamHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u91CC\u6211\u4EEC\u5C31\u4EE5<code>HTTP</code>\u534F\u8BAE\u4E3A\u4F8B\u8BF4\u4E00\u4E0B\u6240\u4EE5\u627E\u5230<code>okhttp HttpHandler.openConnection()</code>\u65B9\u6CD5:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the &quot;License&quot;); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLConnection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLStreamHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HttpHandler</span> <span class="token keyword">extends</span> <span class="token class-name">URLStreamHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token class-name">URLConnection</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8C03\u7528\u4E86OKHttpClient()\u7684\u65B9\u6CD5</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token class-name">URLConnection</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">Proxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> proxy <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;url == null || proxy == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getDefaultPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u4E0B\u6765\u5C31\u60B2\u5267\u4E86\uFF0C\u56E0\u4E3A\u6211\u627E\u4E0D\u5230OkHttpClient()\u7C7B\u4E2D\u6709<code>open</code>\u65B9\u6CD5\u3002<br> \u4ED4\u7EC6\u67E5\u770B\u4E86\u6587\u6863\u540E\u53D1\u73B0\u5728<code>OKHttp</code>1.6.0\u7684\u65F6\u5019\u8BE5\u65B9\u6CD5\u5C31\u5DF2\u7ECF\u5DF2\u7ECF\u8FC7\u65F6\u4E86\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Deprecated</span>
<span class="token keyword">public</span> <span class="token class-name">HttpURLConnection</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span>
<span class="token class-name">Deprecated</span><span class="token punctuation">.</span> moved <span class="token keyword">to</span> <span class="token class-name">OkUrlFactory</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u90A3\u6211\u4EEC\u600E\u4E48\u5F80\u4E0B\u5206\u6790\u5462\uFF1F\u5F88\u663E\u7136<code>Android sdk</code>\u4E2D\u4F7F\u7528\u7684<code>OkHttp</code>\u4E0D\u662F\u6700\u65B0\u7248\u3002\u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528<code>1.5.0</code>\u7248\u672C\u7684<code>OKHttp</code>\u63A5\u7740\u5206\u6790\u3002 \u5728\u9879\u76EE<code>build.gradle</code>\u4E2D\u8FDB\u884C\u914D\u7F6E compile &#39;com.squareup.okhttp:okhttp:1.5.0&#39; \u7136\u540E\u5F00\u59CB\u6109\u5FEB\u7684\u67E5\u770B\u6E90\u7801\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">Util</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpAuthenticator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpURLConnectionImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpsURLConnectionImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseCacheAdapter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>okio<span class="token punctuation">.</span></span><span class="token class-name">ByteString</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>tls<span class="token punctuation">.</span></span><span class="token class-name">OkHostnameVerifier</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">CookieHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">HttpURLConnection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ProxySelector</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ResponseCache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLConnection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLStreamHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLStreamHandlerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">GeneralSecurityException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span></span><span class="token class-name">HostnameVerifier</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span></span><span class="token class-name">SSLContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span></span><span class="token class-name">SSLSocketFactory</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** Configures and creates HTTP connections. */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpClient</span> <span class="token keyword">implements</span> <span class="token class-name">URLStreamHandlerFactory</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RouteDatabase</span> routeDatabase<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Proxy</span> proxy<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Protocol</span><span class="token punctuation">&gt;</span></span> protocols<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">ProxySelector</span> proxySelector<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">CookieHandler</span> cookieHandler<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">OkResponseCache</span> responseCache<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">SSLSocketFactory</span> sslSocketFactory<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">HostnameVerifier</span> hostnameVerifier<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">OkAuthenticator</span> authenticator<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">ConnectionPool</span> connectionPool<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> followProtocolRedirects <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> connectTimeout<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    routeDatabase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RouteDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the default connect timeout for new connections. A value of 0 means no timeout.
   *
   * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">URLConnection</span><span class="token punctuation">#</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span>
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout &lt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;unit == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> millis <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout too large.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    connectTimeout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> millis<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Default connect timeout (in milliseconds). */</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getConnectTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> connectTimeout<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the default read timeout for new connections. A value of 0 means no timeout.
   *
   * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">URLConnection</span><span class="token punctuation">#</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span>
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;timeout &lt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;unit == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> millis <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout too large.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    readTimeout <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> millis<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Default read timeout (in milliseconds). */</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getReadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> readTimeout<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the HTTP proxy that will be used by connections created by this
   * client. This takes precedence over <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">setProxySelector</span></span><span class="token punctuation">}</span>, which is
   * only honored when this proxy is null (which it is by default). To disable
   * proxy use completely, call <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">setProxy</span><span class="token punctuation">(</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span>NO_PROXY<span class="token punctuation">)</span></span></span><span class="token punctuation">}</span>.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setProxy</span><span class="token punctuation">(</span><span class="token class-name">Proxy</span> proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> proxy<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">Proxy</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the proxy selection policy to be used if no <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">setProxy</span></span> proxy<span class="token punctuation">}</span>
   * is specified explicitly. The proxy selector may return multiple proxies;
   * in that case they will be tried in sequence until a successful connection
   * is established.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If unset, the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ProxySelector</span><span class="token punctuation">#</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> system-wide default<span class="token punctuation">}</span>
   * proxy selector will be used.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setProxySelector</span><span class="token punctuation">(</span><span class="token class-name">ProxySelector</span> proxySelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>proxySelector <span class="token operator">=</span> proxySelector<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">ProxySelector</span> <span class="token function">getProxySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> proxySelector<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the cookie handler to be used to read outgoing cookies and write
   * incoming cookies.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If unset, the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">CookieHandler</span><span class="token punctuation">#</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> system-wide default<span class="token punctuation">}</span>
   * cookie handler will be used.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setCookieHandler</span><span class="token punctuation">(</span><span class="token class-name">CookieHandler</span> cookieHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cookieHandler <span class="token operator">=</span> cookieHandler<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">CookieHandler</span> <span class="token function">getCookieHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cookieHandler<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the response cache to be used to read and write cached responses.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setResponseCache</span><span class="token punctuation">(</span><span class="token class-name">ResponseCache</span> responseCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">setOkResponseCache</span><span class="token punctuation">(</span><span class="token function">toOkResponseCache</span><span class="token punctuation">(</span>responseCache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">ResponseCache</span> <span class="token function">getResponseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> responseCache <span class="token keyword">instanceof</span> <span class="token class-name">ResponseCacheAdapter</span>
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResponseCacheAdapter</span><span class="token punctuation">)</span> responseCache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setOkResponseCache</span><span class="token punctuation">(</span><span class="token class-name">OkResponseCache</span> responseCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>responseCache <span class="token operator">=</span> responseCache<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">OkResponseCache</span> <span class="token function">getOkResponseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> responseCache<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the socket factory used to secure HTTPS connections.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If unset, a lazily created SSL socket factory will be used.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setSslSocketFactory</span><span class="token punctuation">(</span><span class="token class-name">SSLSocketFactory</span> sslSocketFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sslSocketFactory <span class="token operator">=</span> sslSocketFactory<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">SSLSocketFactory</span> <span class="token function">getSslSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> sslSocketFactory<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the verifier used to confirm that response certificates apply to
   * requested hostnames for HTTPS connections.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If unset, the
   * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span></span><span class="token class-name">HttpsURLConnection</span><span class="token punctuation">#</span><span class="token function">getDefaultHostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
   * system-wide default<span class="token punctuation">}</span> hostname verifier will be used.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setHostnameVerifier</span><span class="token punctuation">(</span><span class="token class-name">HostnameVerifier</span> hostnameVerifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hostnameVerifier <span class="token operator">=</span> hostnameVerifier<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">HostnameVerifier</span> <span class="token function">getHostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> hostnameVerifier<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the authenticator used to respond to challenges from the remote web
   * server or proxy server.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If unset, the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Authenticator</span><span class="token punctuation">#</span><span class="token field">setDefault</span></span> system-wide default<span class="token punctuation">}</span>
   * authenticator will be used.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setAuthenticator</span><span class="token punctuation">(</span><span class="token class-name">OkAuthenticator</span> authenticator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>authenticator <span class="token operator">=</span> authenticator<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">OkAuthenticator</span> <span class="token function">getAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> authenticator<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Sets the connection pool used to recycle HTTP and HTTPS connections.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If unset, the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ConnectionPool</span><span class="token punctuation">#</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> system-wide
   * default<span class="token punctuation">}</span> connection pool will be used.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setConnectionPool</span><span class="token punctuation">(</span><span class="token class-name">ConnectionPool</span> connectionPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>connectionPool <span class="token operator">=</span> connectionPool<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">ConnectionPool</span> <span class="token function">getConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> connectionPool<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Configure this client to follow redirects from HTTPS to HTTP and from HTTP
   * to HTTPS.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If unset, protocol redirects will be followed. This is different than
   * the built-in <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">HttpURLConnection</span></span></span><span class="token punctuation">}</span>&#39;s default.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setFollowProtocolRedirects</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> followProtocolRedirects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>followProtocolRedirects <span class="token operator">=</span> followProtocolRedirects<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getFollowProtocolRedirects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> followProtocolRedirects<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">RouteDatabase</span> <span class="token function">getRoutesDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> routeDatabase<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@deprecated</span> OkHttp 1.5 enforces an enumeration of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Protocol</span></span> protocols<span class="token punctuation">}</span>
   * that can be selected. Please switch to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">setProtocols</span><span class="token punctuation">(</span><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
   */</span>
  <span class="token annotation punctuation">@Deprecated</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setTransports</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> transports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Protocol</span><span class="token punctuation">&gt;</span></span> protocols <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Protocol</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transports<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> transports<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Protocol</span> protocol <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token class-name">ByteString</span><span class="token punctuation">.</span><span class="token function">encodeUtf8</span><span class="token punctuation">(</span>transports<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        protocols<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">setProtocols</span><span class="token punctuation">(</span>protocols<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Configure the protocols used by this client to communicate with remote
   * servers. By default this client will prefer the most efficient transport
   * available, falling back to more ubiquitous protocols. Applications should
   * only call this method to avoid specific compatibility problems, such as web
   * servers that behave incorrectly when SPDY is enabled.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The following protocols are currently supported:
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
   *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/Protocols/rfc2616/rfc2616.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>http/1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
   *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>spdy/3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
   *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://tools.ietf.org/html/draft-ietf-httpbis-http2-09<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>HTTP-draft-09/2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>This is an evolving set.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span> Future releases may drop
   * support for transitional protocols (like spdy/3.1), in favor of their
   * successors (spdy/4 or http/2.0). The http/1.1 transport will never be
   * dropped.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If multiple protocols are specified, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>
   <span class="token attr-name">*</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://technotes.googlecode.com/git/nextprotoneg.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>NPN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> will
   * be used to negotiate a transport. Future releases may use another mechanism
   * (such as <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://tools.ietf.org/html/draft-friedl-tls-applayerprotoneg-02<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>ALPN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>)
   * to negotiate a transport.
   *
   * <span class="token keyword">@param</span> <span class="token parameter">protocols</span> the protocols to use, in order of preference. The list
   *     must contain &quot;http/1.1&quot;. It must not contain null.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">setProtocols</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Protocol</span><span class="token punctuation">&gt;</span></span> protocols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    protocols <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span>protocols<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>protocols<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Protocol</span><span class="token punctuation">.</span>HTTP_11<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;protocols doesn&#39;t contain http/1.1: &quot;</span> <span class="token operator">+</span> protocols<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocols<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;protocols must not contain null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>protocols <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span>protocols<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@deprecated</span> OkHttp 1.5 enforces an enumeration of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Protocol</span></span>
   *     protocols<span class="token punctuation">}</span> that can be selected. Please switch to <span class="token punctuation">{</span><span class="token keyword">@link</span>
   *     <span class="token reference"><span class="token punctuation">#</span><span class="token function">getProtocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
   */</span>
  <span class="token annotation punctuation">@Deprecated</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTransports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> transports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>protocols<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> protocols<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      transports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>protocols<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">utf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> transports<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Protocol</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProtocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> protocols<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">HttpURLConnection</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">HttpURLConnection</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">Proxy</span> proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> protocol <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// \u5C06\u8BE5\u5BF9\u8C61clone\u540E\u8BBE\u7F6E\u4E00\u4E9B\u5176\u4ED6\u7684\u5C5E\u6027\u8FD4\u56DE\uFF0C\u91CC\u9762\u4F1A\u8BBE\u7F6E\u4E00\u4E2A\u9ED8\u8BA4\u7684\u8FDE\u63A5\u6C60\u3002</span>
    <span class="token class-name">OkHttpClient</span> copy <span class="token operator">=</span> <span class="token function">copyWithDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    copy<span class="token punctuation">.</span>proxy <span class="token operator">=</span> proxy<span class="token punctuation">;</span>
	<span class="token comment">// \u8FD4\u56DE\u4E86HttpURLConnectionImpl\uFF0C\u5E76\u4E14\u628Aclone\u540E\u7684OKHttpClient\u5BF9\u8C61\u4F20\u9012\u8FDB\u53BB\u3002</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpURLConnectionImpl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;https&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpsURLConnectionImpl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected protocol: &quot;</span> <span class="token operator">+</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Returns a shallow copy of this OkHttpClient that uses the system-wide
   * default for each field that hasn&#39;t been explicitly configured.
   */</span>
  <span class="token class-name">OkHttpClient</span> <span class="token function">copyWithDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">OkHttpClient</span> result <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>proxySelector <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span>proxySelector <span class="token operator">=</span> <span class="token class-name">ProxySelector</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>cookieHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span>cookieHandler <span class="token operator">=</span> <span class="token class-name">CookieHandler</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>responseCache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span>responseCache <span class="token operator">=</span> <span class="token function">toOkResponseCache</span><span class="token punctuation">(</span><span class="token class-name">ResponseCache</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>sslSocketFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span>sslSocketFactory <span class="token operator">=</span> <span class="token function">getDefaultSSLSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>hostnameVerifier <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span>hostnameVerifier <span class="token operator">=</span> <span class="token class-name">OkHostnameVerifier</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>authenticator <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span>authenticator <span class="token operator">=</span> <span class="token class-name">HttpAuthenticator</span><span class="token punctuation">.</span>SYSTEM_DEFAULT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>connectionPool <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token comment">// \u4F1A\u7ED9OkHttpClient\u8BBE\u7F6E\u4E00\u4E2A\u9ED8\u8BA4\u7684\u8FDE\u63A5\u6C60</span>
      result<span class="token punctuation">.</span>connectionPool <span class="token operator">=</span> <span class="token class-name">ConnectionPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>protocols <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span>protocols <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span>HTTP2_SPDY3_AND_HTTP<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Java and Android programs default to using a single global SSL context,
   * accessible to HTTP clients as <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SSLSocketFactory</span><span class="token punctuation">#</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>. If we
   * used the shared SSL context, when OkHttp enables NPN for its SPDY-related
   * stuff, it would also enable NPN for other usages, which might crash them
   * because NPN is enabled when it isn&#39;t expected to be.
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
   * This code avoids that by defaulting to an OkHttp created SSL context. The
   * significant drawback of this approach is that apps that customize the
   * global SSL context will lose these customizations.
   */</span>
  <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token class-name">SSLSocketFactory</span> <span class="token function">getDefaultSSLSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sslSocketFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">SSLContext</span> sslContext <span class="token operator">=</span> <span class="token class-name">SSLContext</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;TLS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sslContext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sslSocketFactory <span class="token operator">=</span> sslContext<span class="token punctuation">.</span><span class="token function">getSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GeneralSecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The system has no TLS. Just give up.</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sslSocketFactory<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Returns a shallow copy of this OkHttpClient. */</span>
  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">OkHttpClient</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token class-name">OkResponseCache</span> <span class="token function">toOkResponseCache</span><span class="token punctuation">(</span><span class="token class-name">ResponseCache</span> responseCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> responseCache <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> responseCache <span class="token keyword">instanceof</span> <span class="token class-name">OkResponseCache</span>
        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">OkResponseCache</span><span class="token punctuation">)</span> responseCache
        <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ResponseCacheAdapter</span><span class="token punctuation">(</span>responseCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Creates a URLStreamHandler as a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">URL</span><span class="token punctuation">#</span><span class="token field">setURLStreamHandlerFactory</span></span><span class="token punctuation">}</span>.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This code configures OkHttp to handle all HTTP and HTTPS connections
   * created with <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">URL</span><span class="token punctuation">#</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>   <span class="token punctuation">{</span><span class="token keyword">@code</span>
   <span class="token code-section">*
   *   <span class="token code language-java"><span class="token class-name">OkHttpClient</span> okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
   *   <span class="token code language-java">URL<span class="token punctuation">.</span><span class="token function">setURLStreamHandlerFactory</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
   *</span> <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">URLStreamHandler</span> <span class="token function">createURLStreamHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> protocol<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;https&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">URLStreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token class-name">URLConnection</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token class-name">URLConnection</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">Proxy</span> proxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getDefaultPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">80</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;https&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">443</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u770B\u4E00\u4E0B<code>HttpURLConnectionImpl</code>\u7C7B,\u5B83\u662F<code>HttpURLConnection</code>\u7684\u5B50\u7C7B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpURLConnectionImpl</span> <span class="token keyword">extends</span> <span class="token class-name">HttpURLConnection</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u8FD9\u91CC<code>new URL(url).openConnection()</code>\u65B9\u6CD5\u5DF2\u7ECF\u5206\u6790\u5B8C\u4E86\uFF0C\u5176\u5B9E\u5C31\u662F\u8FD4\u56DE\u4E86\u4E00\u4E2AHtppURLConnectionImpl\u5BF9\u8C61\u3002</p><p>\u6211\u4EEC\u5728\u4F7F\u7528<code>HttpURLConnection</code>\u90FD\u662F\u8FD9\u6837\u4F7F\u7528\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://www.baidu.com&quot;</span>
<span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpURLConnection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span>url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u8BBE\u7F6E\u4E00\u4E9B\u8BF7\u6C42\u5934\u7B49\u53C2\u6570</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u7136\u540E\u8C03\u7528\u4E00\u4E9B\u5176\u4ED6\u7684\u83B7\u53D6\u7ED3\u679C\u6216\u8005\u72B6\u6001\u7684\u65B9\u6CD5\u3002</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
connection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">getOuoputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u5206\u6790\u4E86<code>new URL().openConnection()</code>\u90A3\u6211\u4EEC\u8FD9\u91CC\u5C31\u63A5\u7740\u5206\u6790\u7B2C\u4E8C\u6B65\u4E86\uFF0C\u5C31\u662F\u8C03\u7528<code>connect()</code>\u65B9\u6CD5\u7684\u5904\u7406:<br> \u8FD9\u91CC\u770B\u4E00\u4E0B<code>HttpURLConnectionImpl.connect()</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token function">initHttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> success<span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  success <span class="token operator">=</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u770B\u4E00\u4E0B<code>initHttpEngine()</code>\u65B9\u6CD5\u7684\u5B9E\u73B0:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpEngineFailure <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> httpEngineFailure<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>httpEngine <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    connected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>doOutput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// they are requesting a stream to write to. This implies a POST method</span>
          method <span class="token operator">=</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token function">hasRequestBody</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// If the request method is neither POST nor PUT nor PATCH, then you&#39;re not writing</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span>method <span class="token operator">+</span> <span class="token string">&quot; does not support writing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// \u5C06newHttpEngine\u65B9\u6CD5\u7684\u8FD4\u56DE\u503C\u8D4B\u503C\u7ED9HttpEngine\u7684\u6210\u5458\u53D8\u91CF\u3002</span>
      httpEngine <span class="token operator">=</span> <span class="token function">newHttpEngine</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      httpEngineFailure <span class="token operator">=</span> e<span class="token punctuation">;</span>
      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token class-name">HttpEngine</span> <span class="token function">newHttpEngine</span><span class="token punctuation">(</span><span class="token class-name">String</span> method<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">,</span>
      <span class="token class-name">RetryableSink</span> requestBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token comment">/* No body; that&#39;s passed separately. */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Headers</span> headers <span class="token operator">=</span> requestHeaders<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> headers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      builder<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> bufferRequestBody<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedContentLength <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      bufferRequestBody <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      builder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>fixedContentLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>chunkLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      bufferRequestBody <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      builder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Transfer-Encoding&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;chunked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      bufferRequestBody <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Request</span> request <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// If we&#39;re currently not using caches, make sure the engine&#39;s client doesn&#39;t have one.</span>
    <span class="token class-name">OkHttpClient</span> engineClient <span class="token operator">=</span> client<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>engineClient<span class="token punctuation">.</span><span class="token function">getOkResponseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getUseCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      engineClient <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOkResponseCache</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// \u5C06\u4E4B\u524D\u901A\u8FC7\u6784\u9020\u51FD\u6570\u4F20\u9012\u8FDB\u6765\u7684OkHttpClient\u5BF9\u8C61clone\u4E00\u4EFD\u540E\u518D\u4F20\u9012\u7ED9HttpEngine</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpEngine</span><span class="token punctuation">(</span>engineClient<span class="token punctuation">,</span> request<span class="token punctuation">,</span> bufferRequestBody<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u8FD9\u91CC\u6211\u4EEC\u77E5\u9053\u4ED6\u4F1A\u521B\u5EFA\u4E00\u4E2A<code>HttpEngine</code>\u7C7B\uFF0C\u6211\u4EEC\u5148\u4E0D\u7BA1\u5B83\uFF0C\u63A5\u7740\u770B\u4E00\u4E0B<code>execute()</code>\u65B9\u6CD5\u7684\u5185\u90E8\u5B9E\u73B0\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Sends a request and optionally reads a response. Returns true if the
* request was successfully executed, and false if the request can be
* retried. Throws an exception if the request failed permanently.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> readResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8C03\u7528\u4E86HttpEngine\u7684sendRequest\u65B9\u6CD5\u3002</span>
  httpEngine<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  route <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  handshake <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>
      <span class="token operator">?</span> httpEngine<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHandshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// \u8BFB\u53D6\u7ED3\u679C\uFF0C\u6211\u4EEC\u5148\u4E0D\u5206\u6790\u8FD9\u91CC\uFF0C\u7B49\u628AsendRequest\u90E8\u5206\u5168\u90E8\u5206\u6790\u5B8C\u6210\u540E\u518D\u56DE\u6765\u5206\u6790readResponse()\u90E8\u5206\u3002</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>readResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    httpEngine<span class="token punctuation">.</span><span class="token function">readResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">HttpEngine</span> retryEngine <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>retryEngine <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    httpEngine <span class="token operator">=</span> retryEngine<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Give up; recovery is not possible.</span>
  httpEngineFailure <span class="token operator">=</span> e<span class="token punctuation">;</span>
  <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u8FD9\u91CC\uFF0C\u53EF\u4EE5\u5927\u80C6\u7684\u731C\u6D4B\u4E00\u4E0B\u4E86<code>HttpEngine</code>\u5E94\u8BE5\u5C31\u662F\u5B9E\u9645\u5728<code>Socket</code>\u94FE\u63A5\u4E0A\u8FDB\u884C\u6570\u636E\u6536\u53D1\u7684\u7C7B\u3002 \u5F53\u7136\u8FD9\u53EA\u662F\u731C\u6D4B\uFF0C\u63A5\u7740\u770B\u4E00\u4E0B\u5B83\u7684\u5B9E\u73B0:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Handles a single HTTP request/response pair. Each HTTP engine follows this
 * lifecycle:
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>It is created.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The HTTP request message is sent with sendRequest(). Once the request
 * is sent it is an error to modify the request headers. After
 * sendRequest() has been called the request body can be written to if
 * it exists.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>The HTTP response message is read with readResponse(). After the
 * response has been read the response headers and body can be read.
 * All responses have a response body input stream, though in some
 * instances this stream is empty.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The request and response may be served by the HTTP response cache, by the
 * network, or by both in the event of a conditional GET.
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6587\u6863\u9A8C\u8BC1\u4E86\u6211\u4EEC\u7684\u60F3\u6CD5\u3002\u56E0\u4E3A\u5B83\u5185\u90E8\u5B9E\u73B0\u4EE3\u7801\u6BD4\u8F83\u591A\uFF0C\u6240\u4EE5\u5C31\u4E0D\u5168\u90E8\u8D34\u4E86\uFF0C\u6309\u7167\u91CD\u8981\u7684\u4E00\u6B65\u6B65\u5206\u6790\uFF0C\u65E2\u7136\u4E0A\u9762\u8C03\u7528\u4E86<code>sendRequest()</code>\u65B9\u6CD5\uFF0C\u8FD9\u91CC\u5C31\u4ECE\u4ED6\u5165\u624B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Figures out what the response source will be, and opens a socket to that
* source if necessary. Prepares the request headers and gets ready to start
* writing the request body if it exists.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>responseSource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Already sent.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>transport <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// \u8BBE\u7F6E\u4E00\u4E9B\u8BF7\u6C42\u5934\uFF0C\u6B63\u5F0F\u8FD9\u4E2A\u65B9\u6CD5\u5185\u90E8\u9ED8\u8BA4\u8BBE\u7F6E\u4E86\`Keep-Alive\`\u7684\u503C\uFF0C\u4E5F\u5C31\u662F\u5728Android Level 9\u4E4B\u524D\u56E0\u4E3ABug\uFF0C\u6211\u4EEC\u9700\u8981\u5173\u95ED\u5B83\u7684\u5177\u4F53\u5904\u7406\u4F4D\u7F6E\u3002   </span>
	<span class="token function">prepareRawRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// \u5904\u7406cache</span>
	<span class="token class-name">OkResponseCache</span> responseCache <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOkResponseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">Response</span> cacheResponse <span class="token operator">=</span> responseCache <span class="token operator">!=</span> <span class="token keyword">null</span>
		<span class="token operator">?</span> responseCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
		<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">CacheStrategy</span> cacheStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> request<span class="token punctuation">,</span> cacheResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	responseSource <span class="token operator">=</span> cacheStrategy<span class="token punctuation">.</span>source<span class="token punctuation">;</span>
	request <span class="token operator">=</span> cacheStrategy<span class="token punctuation">.</span>request<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>responseCache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token comment">// \u8BB0\u5F55\u4E0B\u5F53\u524D\u7684\u8BF7\u6C42\u662F\u6765\u81EA\u7F51\u7EDC\u8BF7\u6C42\u8FD8\u662F\u6765\u65F6\u7F13\u5B58\u4E2D\u7684\u6570\u636E\u3002</span>
	  responseCache<span class="token punctuation">.</span><span class="token function">trackResponse</span><span class="token punctuation">(</span>responseSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>responseSource <span class="token operator">!=</span> <span class="token class-name">ResponseSource</span><span class="token punctuation">.</span>NETWORK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  validatingResponse <span class="token operator">=</span> cacheStrategy<span class="token punctuation">.</span>response<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>cacheResponse <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>responseSource<span class="token punctuation">.</span><span class="token function">usesCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token function">closeQuietly</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// We don&#39;t need this cached response. Close it.</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>responseSource<span class="token punctuation">.</span><span class="token function">requiresConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token comment">// Open a connection unless we inherited one from a redirect.</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// \u8C03\u7528connect\u65B9\u6CD5\uFF0C\u5185\u90E8\u4F1A\u91CD\u65B0\u521B\u5EFA\u4E00\u4E2Aconnection\uFF0C\u8FDE\u63A5\u5230\u670D\u52A1\u5668\u3001\u91CD\u5B9A\u5411\u6216\u8005\u901A\u8FC7\u4EE3\u7406\u3002</span>
		<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>
	  <span class="token comment">// \u901A\u8FC7Connection\u521B\u5EFA\u4E00\u4E2AHttpTransport\u7C7B\u3002\u8FD9\u4E2A\u548C\u540E\u9762\u7684connection\u7C7B\u4E00\u8D77\u770B\uFF0C Transport\u63A5\u53E3\u63D0\u4F9B\u4E86\u4E00\u4E2A\u7528\u6237\u5199Request\u5934\u548C\u6570\u636E\u7684\u8F93\u51FA\u6D41\u3002</span>
	  transport <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Transport</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">newTransport</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	  <span class="token comment">// Create a request body if we don&#39;t have one already. We&#39;ll already have</span>
	  <span class="token comment">// one if we&#39;re retrying a failed POST.</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> requestBodyOut <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// \u901A\u8FC7transport\u521B\u5EFA\u4E00\u4E2A\u8BF7\u6C42\u4F53\u7684\u8F93\u51FA\u6D41\uFF0CrequestBodyOut\u662FSink\u63A5\u53E3\u7684\u5B9E\u73B0\u7C7B\uFF0C\u5176\u5B9E\u5C31\u662F\u5C06\u8BF7\u6C42\u5934\u548C\u8BF7\u6C42\u4F53\u53D1\u9001\u7ED9\u670D\u52A1\u5668\u3002\u8FD9\u90E8\u5206\u8DDF\u4E0B\u53BB\u5185\u5BB9\u6BD4\u8F83\u591A\uFF0C\u5C31\u4E0D\u5F80\u4E0B\u8DDF\u4E86\u3002</span>
	\u3000\u3000\u3000\u3000<span class="token comment">// \u5230\u8FD9\u91CC\u5C31\u5DF2\u7ECF\u5B8C\u6210\u4E86\u4E0E\u670D\u52A1\u5668\u7684\u8FDE\u63A5\u529F\u80FD\uFF0C\u5E76\u4E14\u628A\u8BF7\u6C42\u5185\u5BB9\u53D1\u9001\u7ED9\u670D\u52A1\u5668\u3002\u8BF7\u6C42\u90E8\u5206\u5C31\u6267\u884C\u5B8C\u4E86\uFF0C\u53EF\u4EE5\u56DE\u53BB\u4E86\uFF0C\u8FD8\u77E5\u9053\u5F00\u5934\u662F\u54EA\u5417\uFF1F\u54C8\u54C8\u3002\u63A5\u4E0B\u6765\u7684\u5C31\u662F\u4ECE\u670D\u52A1\u5668\u63A5\u53E3\u8BFB\u53D6\u8FD4\u56DE\u6570\u636E\u4E86\u3002  </span>
		requestBodyOut <span class="token operator">=</span> transport<span class="token punctuation">.</span><span class="token function">createRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>

	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	  <span class="token comment">// We&#39;re using a cached response. Recycle a connection we may have inherited from a redirect.</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// \u56DE\u6536connection\uFF0C\u8FD9\u91CC\u5C31\u770B\u5230\u4E86\u8FDE\u63A5\u6C60\uFF0C\u8FD9\u4E2Aclient\u5C31\u662F\u6784\u9020\u51FD\u6570\u4E2D\u4F20\u9012\u8FDB\u6765\u7684OKHttpClient</span>
		client<span class="token punctuation">.</span><span class="token function">getConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
		connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>

	  <span class="token comment">// No need for the network! Promote the cached response immediately.</span>
	  <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> validatingResponse<span class="token punctuation">;</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>validatingResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">initContentStream</span><span class="token punctuation">(</span>validatingResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u770B\u4E00\u4E0B<code>connect()</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/** Connect to the origin server either directly or via a proxy. */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>routeSelector <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token class-name">String</span> uriHost <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>uriHost <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> uriHost<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownHostException</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>
	  <span class="token class-name">SSLSocketFactory</span> sslSocketFactory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	  <span class="token class-name">HostnameVerifier</span> hostnameVerifier <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isHttps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		sslSocketFactory <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getSslSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		hostnameVerifier <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getHostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>
	  <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>uriHost<span class="token punctuation">,</span> <span class="token function">getEffectivePort</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sslSocketFactory<span class="token punctuation">,</span>
		  hostnameVerifier<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getProtocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token comment">// RoteSeclector\u7C7B\u4ECB\u7ECD. Selects routes to connect to an origin server. Each connection requires a</span>
	  <span class="token comment">// choice of proxy server, IP address, and TLS mode. Connections may also be</span>
	  <span class="token comment">// recycled.\u6CE8\u610F\u4ED6\u628AOkHttpClient\u4E2D\u7684connection pool\u4F20\u9012\u8FDB\u6765\u4E86\u3002</span>
	  routeSelector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RouteSelector</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getProxySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		  client<span class="token punctuation">.</span><span class="token function">getConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Dns</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getRoutesDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// roteSeclecrot.next()\u65B9\u6CD5\u7684\u6CE8\u91CAReturns the next route address to attempt.\u8FD9\u4E00\u6B65\u975E\u5E38\u91CD\u8981\u3002</span>
	connection <span class="token operator">=</span> routeSelector<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token comment">// connection \u8FDB\u884C\u8FDE\u63A5\u4E86\u554A\u3002\u4ED6\u91CC\u9762\u4F1A\u7528Socket\u5F00\u59CB\u8FDE\u4E86\u3002\u3002\u540E\u9762\u6211\u4EEC\u518D\u7EC6\u770B\u3002\u7B80\u5355\u7684\u8BF4Connection\u7BA1\u7406\u4E86Socket\uFF0C\u540E\u9762\u6211\u4EEC\u8981\u91CD\u70B9\u770B\u8FD9\u4E2A\u7C7B\u3002</span>
	  connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getConnectTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getReadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getTunnelConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> client<span class="token punctuation">.</span><span class="token function">getConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  client<span class="token punctuation">.</span><span class="token function">getRoutesDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  connection<span class="token punctuation">.</span><span class="token function">updateReadTimeout</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getReadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	route <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u4E0B\u6765\u6211\u4EEC\u8981\u5148\u770B\u4E00\u4E0BrouteSelector.next()\u65B9\u6CD5\u5982\u4F55\u8FD4\u56DEconnection\u5BF9\u8C61\uFF0C\u7136\u540E\u5728\u770BConnection.connect()\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Returns the next route address to attempt.
*
* <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NoSuchElementException</span></span> if there are no more routes to attempt.
*/</span>
<span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u4F7F\u7528\u8FDE\u63A5\u6C60\u83B7\u53D6Connection\u7684\u5730\u65B9\u3002pool\u5C31\u662FOkHttpClient\u4E2D\u7684\u8FDE\u63A5\u6C60\u3002</span>
	<span class="token comment">// Always prefer pooled connections over new connections.</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> pooled<span class="token punctuation">;</span> <span class="token punctuation">(</span>pooled <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token comment">// \u5339\u914Dget\u65B9\u6CD5\uFF0C\u6216\u8005\u5224\u65AD\u662F\u5426\u53EF\u8BFB\uFF0Chttp1.x\u662F\u901A\u8FC7\u5224\u65ADsocket\u662F\u5426\u5173\u95ED\u6765\u5224\u65AD\u662F\u5426\u53EF\u8BFB\u7684\u3002</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> pooled<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pooled<span class="token punctuation">;</span>
	  <span class="token comment">// \u4E0D\u6EE1\u8DB3\u91CD\u7528\uFF0C\u5C31\u5173\u95ED\u3002</span>
	  pooled<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Compute the next route to attempt.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNextTlsMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNextInetSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNextProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNextPostponed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		  <span class="token punctuation">}</span>
		  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> <span class="token function">nextPostponed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		lastProxy <span class="token operator">=</span> <span class="token function">nextProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">resetNextInetSocketAddress</span><span class="token punctuation">(</span>lastProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token punctuation">}</span>
	  lastInetSocketAddress <span class="token operator">=</span> <span class="token function">nextInetSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">resetNextTlsMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">boolean</span> modernTls <span class="token operator">=</span> <span class="token function">nextTlsMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TLS_MODE_MODERN<span class="token punctuation">;</span>
	<span class="token class-name">Route</span> route <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> lastProxy<span class="token punctuation">,</span> lastInetSocketAddress<span class="token punctuation">,</span> modernTls<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>routeDatabase<span class="token punctuation">.</span><span class="token function">shouldPostpone</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  postponedRoutes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token comment">// We will only recurse in order to skip previously failed routes. They will be</span>
	  <span class="token comment">// tried last.</span>
	  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// \u6CA1\u6709\u7684\u8BDD\u4E5F\u4F1A\u53BB\u521B\u5EFA\uFF0C\u5E76\u628AOkHttpClient\u4E2D\u7684\u8FDE\u63A5\u6C60\u4F20\u9012\u8FDB\u53BB\u3002</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u518D\u770B\u4E00\u4E0B<code>Connection</code>\u7C7B\u7684\u5B9E\u73B0\u4EE5\u53CA\u5176<code>connect()</code>\u65B9\u6CD5:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Connection</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionPool</span> pool<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Route</span> route<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">InputStream</span> in<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">OutputStream</span> out<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">BufferedSource</span> source<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">BufferedSink</span> sink<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> connected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">HttpConnection</span> httpConnection<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">SpdyConnection</span> spdyConnection<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> httpMinorVersion <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Assume HTTP/1.1</span>
  <span class="token keyword">private</span> <span class="token keyword">long</span> idleStartTimeNs<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Handshake</span> handshake<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> recycleCount<span class="token punctuation">;</span>
  <span class="token comment">// \u4F20\u9012\u8FDB\u6765\u7684\u8FDE\u63A5\u6C60\u3002</span>
  <span class="token keyword">public</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token class-name">ConnectionPool</span> pool<span class="token punctuation">,</span> <span class="token class-name">Route</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pool <span class="token operator">=</span> pool<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>route <span class="token operator">=</span> route<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> connectTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">,</span> <span class="token class-name">TunnelRequest</span> tunnelRequest<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connected<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;already connected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    socket <span class="token operator">=</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Proxy<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span>HTTP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8FDEsocket\u4E86\uFF0C\u5185\u90E8\u8C03\u7528\u4E86socket.connect()\u65B9\u6CD5\u3002Connects this socket to the given remote host address and port specified</span>
    <span class="token comment">// by the SocketAddress {@code remoteAddr} with the specified timeout. The</span>
    <span class="token comment">// connecting method will block until the connection is established or an</span>
    <span class="token comment">// error occurred.</span>
    <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> route<span class="token punctuation">.</span>inetSocketAddress<span class="token punctuation">,</span> connectTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>address<span class="token punctuation">.</span>sslSocketFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token comment">// \u5B8C\u6210TLS\u63E1\u624B\u548C\u9A8C\u8BC1</span>
      <span class="token function">upgradeToTls</span><span class="token punctuation">(</span>tunnelRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">initSourceAndSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u521B\u5EFAHttpConnection.A socket connection that can be used to send HTTP/1.1 messages. </span>
      <span class="token comment">// \u8FD9\u4E2AHttpConnection\u6709\u4EC0\u4E48\u7528\u5462\uFF1F\u5C31\u662F\u4E0B\u9762\u7684newTransport\u65B9\u6CD5\u4E2D\u4F1A\u7528\u3002\u800C\u4E14\u8FD8\u8981\u628A\u8FDE\u63A5\u6C60\u4F20\u9012\u8FDB\u53BB\uFF1F</span>
      httpConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpConnection</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// \u8FD9\u6837\u5C31\u5DF2\u7ECF\u8FDE\u63A5\u4E0A\u4E86</span>
    connected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u8BE5\u65B9\u6CD5\u51B3\u5B9A\u4E86\u4F7F\u7528\u7684\u534F\u8BAE\u662FSPDY\u8FD8\u662FHTTP</span>
  <span class="token doc-comment comment">/** Returns the transport appropriate for this connection. */</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">newTransport</span><span class="token punctuation">(</span><span class="token class-name">HttpEngine</span> httpEngine<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>spdyConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">SpdyTransport</span><span class="token punctuation">(</span>httpEngine<span class="token punctuation">,</span> spdyConnection<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HttpTransport</span><span class="token punctuation">(</span>httpEngine<span class="token punctuation">,</span> httpConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u8FD9\u91CC\u5C31\u5DF2\u7ECF\u628A\u53D1\u9001\u8BF7\u6C42\u5230\u670D\u52A1\u5668\u7684\u90E8\u5206\u5168\u90E8\u5206\u6790\u5B8C\u4E86\uFF0C\u5C31\u60F3\u4E0A\u9762\u6240\u8BF4\u7684\u6211\u4EEC\u5E94\u8BE5\u56DE\u53BB\u4E86\uFF0C\u56DE\u53BB\u5206\u6790\u53D1\u9001\u5B8C\u8BF7\u6C42\u540E\u7684\u90E8\u5206\u3002 \u6211\u4EEC\u8FD9\u4E2A\u5206\u6790\u662F\u5728<code>HttpURLConnectionImpl.execute()</code>\u65B9\u6CD5\u4E2D\u7684<code>HttpEngine.sendRequest()</code>\u65B9\u6CD5\u5F00\u59CB\u4E00\u76F4\u5206\u6790\u4E0B\u6765\u7684\uFF0C \u6240\u4EE5\u6211\u4EEC\u8FD8\u662F\u8981\u56DE\u5230<code>HttpURLConnectionImpl.execute()</code>\u65B9\u6CD5\u4E2D.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> readResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u4E0A\u9762\u5DF2\u7ECF\u628AsendRequest\u90E8\u5206\u5168\u90E8\u5206\u6790\u5B8C\u4E86\uFF0C\u8BE5\u65B9\u6CD5\u4F1A\u4E0E\u670D\u52A1\u5668\u901A\u8FC7Socket\u5EFA\u7ACB\u8FDE\u63A5\u5E76\u628A\u8BF7\u6C42\u90E8\u5206\u53D1\u9001\u7ED9\u670D\u52A1\u5668\u3002</span>
  httpEngine<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  route <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  handshake <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>
      <span class="token operator">?</span> httpEngine<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHandshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>readResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u53D1\u9001\u5B8C\u8BF7\u6C42\u4E4B\u540E\u8BE5\u5E72\u4EC0\u4E48\u5462\uFF1F \u5F53\u7136\u662F\u8BFB\u53D6\u8FD4\u56DE\u6570\u636E\u4E86\u3002\u3002\u3002 \u6CA1\u9519\u5C31\u662F\u5B83\u3002\u4F46\u662F\u4E0D\u8981\u5FD8\u4E86\u5728connect()\u65B9\u6CD5\u4F20\u9012\u8FC7\u6765\u7684\u65F6\u5019\u8FD9\u4E2A\u503C\u662Ffalse\u3002</span>
    <span class="token comment">// \u6240\u4EE5\u8FD9\u4E00\u6B65\u5728\u8FD9\u91CC\u662F\u4E0D\u6267\u884C\u7684\uFF0C\u4F46\u662F\u6211\u4EEC\u4E5F\u5206\u6790\u4E0B\uFF0C\u65B9\u4FBF\u4EE5\u540E\u7406\u89E3\u3002\u90A3\u8FD9\u4E2A\u503C\u4EC0\u4E48\u65F6\u5019\u662Ftrue\u5462\uFF1F\u5C31\u662F\u5728getResponse()\u65B9\u6CD5\u4E2D\u3002</span>
    httpEngine<span class="token punctuation">.</span><span class="token function">readResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">HttpEngine</span> retryEngine <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">recover</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>retryEngine <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    httpEngine <span class="token operator">=</span> retryEngine<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Give up; recovery is not possible.</span>
  httpEngineFailure <span class="token operator">=</span> e<span class="token punctuation">;</span>
  <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u770B<code>HttpEngine.readResponse()</code>\u65B9\u6CD5\u5427\u3002\u6CE8\u91CA\u8BF4\u7684\u975E\u5E38\u660E\u767D\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Flushes the remaining request header and body, parses the HTTP response
* headers and starts reading the HTTP response body if it exists.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">readResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>responseSource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;call sendRequest() first!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>responseSource<span class="token punctuation">.</span><span class="token function">requiresConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

<span class="token comment">// Flush the request body if there&#39;s data outstanding.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedRequestBody <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bufferedRequestBody<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  bufferedRequestBody<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>sentRequestMillis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">OkHeaders</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> requestBodyOut <span class="token keyword">instanceof</span> <span class="token class-name">RetryableSink</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// We might not learn the Content-Length until the request body has been buffered.</span>
    <span class="token keyword">long</span> contentLength <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RetryableSink</span><span class="token punctuation">)</span> requestBodyOut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  transport<span class="token punctuation">.</span><span class="token function">writeRequestHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>requestBodyOut <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedRequestBody <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This also closes the wrapped requestBodyOut.</span>
    bufferedRequestBody<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    requestBodyOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>requestBodyOut <span class="token keyword">instanceof</span> <span class="token class-name">RetryableSink</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transport<span class="token punctuation">.</span><span class="token function">writeRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RetryableSink</span><span class="token punctuation">)</span> requestBodyOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

transport<span class="token punctuation">.</span><span class="token function">flushRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

response <span class="token operator">=</span> transport<span class="token punctuation">.</span><span class="token function">readResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getHandshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">OkHeaders</span><span class="token punctuation">.</span>SENT_MILLIS<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sentRequestMillis<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">OkHeaders</span><span class="token punctuation">.</span>RECEIVED_MILLIS<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setResponseSource</span><span class="token punctuation">(</span>responseSource<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">setHttpMinorVersion</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">httpMinorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">receiveHeaders</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>responseSource <span class="token operator">==</span> <span class="token class-name">ResponseSource</span><span class="token punctuation">.</span>CONDITIONAL_CACHE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u68C0\u67E5\u7F13\u5B58\u662F\u5426\u53EF\u7528\uFF0C\u5982\u679C\u53EF\u7528\u5C31\u7528\u5F53\u524D\u7F13\u5B58\u7684response\u3002\u5E76\u4E14\u91CA\u653E\u8BE5\u8FDE\u63A5\u3002</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>validatingResponse<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transport<span class="token punctuation">.</span><span class="token function">emptyTransferStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> <span class="token function">combine</span><span class="token punctuation">(</span>validatingResponse<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Update the cache after combining headers but before stripping the</span>
    <span class="token comment">// Content-Encoding header (as performed by initContentStream()).</span>
    <span class="token class-name">OkResponseCache</span> responseCache <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOkResponseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    responseCache<span class="token punctuation">.</span><span class="token function">trackConditionalCacheHit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    responseCache<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>validatingResponse<span class="token punctuation">,</span> <span class="token function">cacheableResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>validatingResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">initContentStream</span><span class="token punctuation">(</span>validatingResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">closeQuietly</span><span class="token punctuation">(</span>validatingResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Don&#39;t call initContentStream() when the response doesn&#39;t have any content.</span>
  responseTransferSource <span class="token operator">=</span> transport<span class="token punctuation">.</span><span class="token function">getTransferStream</span><span class="token punctuation">(</span>cacheRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
  responseBody <span class="token operator">=</span> responseTransferSource<span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u8BBE\u7F6EcacheRequest\u7684\u503C</span>
<span class="token function">maybeCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u8BBE\u7F6E\u8FD4\u56DE\u6570\u636E\u4E86\uFF0Ctransport\u8FD9\u91CC\u4E5F\u5C31\u662FHttpTransport\u3002\u4ED6\u7684getTransferStream\u8FD4\u56DE\u7684\u662F\u4E00\u4E2ASource\u63A5\u53E3\u7684\u5B9E\u73B0\u7C7B\u3002\u4E5F\u5C31\u662F\u8FD4\u56DE\u7684\u6570\u636E\u3002</span>
<span class="token function">initContentStream</span><span class="token punctuation">(</span>transport<span class="token punctuation">.</span><span class="token function">getTransferStream</span><span class="token punctuation">(</span>cacheRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5148\u770B\u4E00\u4E0BmaybeCache()\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">maybeCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token class-name">OkResponseCache</span> responseCache <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOkResponseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>responseCache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

<span class="token comment">// Should we cache this response for this request?</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CacheStrategy</span><span class="token punctuation">.</span><span class="token function">isCacheable</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  responseCache<span class="token punctuation">.</span><span class="token function">maybeRemove</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Offer this request to the cache.</span>
cacheRequest <span class="token operator">=</span> responseCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">cacheableResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u518D\u770B\u4E00\u4E0B<code>initContentStream()</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Initialize the response content stream from the response transfer source.
* These two sources are the same unless we&#39;re doing transparent gzip, in
* which case the content source is decompressed.
*
* <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Whenever we do transparent gzip we also strip the corresponding headers.
* We strip the Content-Encoding header to prevent the application from
* attempting to double decompress. We strip the Content-Length header because
* it is the length of the compressed content, but the application is only
* interested in the length of the uncompressed content.
*
* <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This method should only be used for non-empty response bodies. Response
* codes like &quot;304 Not Modified&quot; can include &quot;Content-Encoding: gzip&quot; without
* a response body and we will crash if we attempt to decompress the zero-byte
* source.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initContentStream</span><span class="token punctuation">(</span><span class="token class-name">Source</span> transferSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
responseTransferSource <span class="token operator">=</span> transferSource<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>transparentGzip <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;gzip&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token comment">// \u6CA1\u6709\u7ED3\u679C\u65F6response\u4E3Anull\uFF0C\u6709\u7ED3\u679C\u4E86\u5C31\u4F1A\u7ED9\u4ED6\u8D4B\u503C\u3002</span>
  response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Encoding&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  responseBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GzipSource</span><span class="token punctuation">(</span>transferSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  responseBody <span class="token operator">=</span> transferSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u8FD9\u91CC\u53C8\u6267\u884C\u5B8C\u4E86\uFF0CresponseBody\u5DF2\u7ECF\u88AB\u8D4B\u503C\u4E86\uFF0C\u4ED6\u662F\u4E00\u4E2ASource\u63A5\u53E3\u7684\u5B9E\u73B0\u7C7B\u3002\u4E5F\u5C31\u662F\u8BF4\u5230\u8FD9\u91CC\uFF0C\u8FD9\u6B21\u7F51\u7EDC\u8BF7\u6C42\u5C31\u5B8C\u6210\u4E86\uFF0C\u4E5F\u6536\u5230\u4E86\u670D\u52A1\u5668\u8FD4\u56DE\u7684\u6570\u636E\u3002</p><p>\u4E5F\u5C31\u662F\u8BF4\u5230\u8FD9\u91CC\u6211\u4EEC\u5DF2\u7ECF\u5206\u6790\u4E86:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">HttpURLConnection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u4E0B\u6765\u5C31\u662F\u5206\u6790<code>connection.getResponseCode()</code>\u4EE5\u53CA<code>connection.getOutputStream()</code>\u8FD9\u4E24\u4E2A\u65B9\u6CD5\u4E86\u3002<br> \u5148\u770B\u4E00\u4E0B<code>getResponseCode()</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">// \u770B\u5230\u4E86\u5417\uFF1F\u8FD9\u91CC\u5C31\u662F\u521A\u624D\u6211\u4EEC\u8BF4\u7684execute()\u65B9\u6CD5\u7684\u53C2\u6570\u4EC0\u4E48\u65F6\u5019\u4F1A\u4E3Atrue\u7684\u5730\u65B9\u3002</span>
<span class="token keyword">return</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u90A3\u6211\u4EEC\u63A5\u7740\u770B\u4E00\u4E0B<code>getResponse()</code>\u65B9\u6CD5\uFF0C\u5176\u5B9E\u5C31\u662F\u76F4\u63A5\u8BFB\u53D6\u54CD\u5E94\u5934\u7684\u54CD\u5E94\u503C\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Aggressively tries to get the final HTTP response, potentially making
* many HTTP requests in the process in order to cope with redirects and
* authentication.
*/</span>
<span class="token keyword">private</span> <span class="token class-name">HttpEngine</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token function">initHttpEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u5982\u679C\u5DF2\u7ECF\u6709\u8FD4\u56DE\u6570\u636E\u4E86\u5C31\u76F4\u63A5\u8FD4\u56DE</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>httpEngine<span class="token punctuation">.</span><span class="token function">hasResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> httpEngine<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u53C2\u6570\u4E3Atrue\u4E86\u3002</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Retry</span> retry <span class="token operator">=</span> <span class="token function">processResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>retry <span class="token operator">==</span> <span class="token class-name">Retry</span><span class="token punctuation">.</span>NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    httpEngine<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> httpEngine<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// The first request was insufficient. Prepare for another...</span>
  <span class="token class-name">String</span> retryMethod <span class="token operator">=</span> method<span class="token punctuation">;</span>
  <span class="token class-name">Sink</span> requestBody <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Although RFC 2616 10.3.2 specifies that a HTTP_MOVED_PERM</span>
  <span class="token comment">// redirect should keep the same method, Chrome, Firefox and the</span>
  <span class="token comment">// RI all issue GETs when following any redirect.</span>
  <span class="token keyword">int</span> responseCode <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>responseCode <span class="token operator">==</span> HTTP_MULT_CHOICE
      <span class="token operator">||</span> responseCode <span class="token operator">==</span> HTTP_MOVED_PERM
      <span class="token operator">||</span> responseCode <span class="token operator">==</span> HTTP_MOVED_TEMP
      <span class="token operator">||</span> responseCode <span class="token operator">==</span> HTTP_SEE_OTHER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    retryMethod <span class="token operator">=</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">;</span>
    requestHeaders<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    requestBody <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>requestBody <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>requestBody <span class="token keyword">instanceof</span> <span class="token class-name">RetryableSink</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpRetryException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot retry streamed HTTP body&quot;</span><span class="token punctuation">,</span> responseCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>retry <span class="token operator">==</span> <span class="token class-name">Retry</span><span class="token punctuation">.</span>DIFFERENT_CONNECTION<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    httpEngine<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Connection</span> connection <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  httpEngine <span class="token operator">=</span> <span class="token function">newHttpEngine</span><span class="token punctuation">(</span>retryMethod<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">RetryableSink</span><span class="token punctuation">)</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u770B\u4E00\u4E0B<code>getOutputStream()</code>\u7684\u6E90\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">OutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">// \u770B\u5230\u4E86\u5417\uFF1F\u4ED6\u5185\u90E8\u4F1A\u5148\u53BB\u8C03\u7528connect()\u65B9\u6CD5</span>
<span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

\u3000  <span class="token comment">// \u8FD9\u91CC\u53EF\u80FD\u6709\u4EBA\u4F1A\u6709\u8BF4\uFF0CgetOutputStream\u548Crequest body\u6709\u4EC0\u4E48\u5173\u7CFB\uFF0C\u5E94\u8BE5\u662Fresponse body\u624D\u5BF9\u554A\u3002</span>
<span class="token comment">// \u4E0D\u8981\u5F04\u6DF7\u4E86\u554A\uFF0CgetOutputStream\u662F\u8981\u628Apost\u8BF7\u6C42\u7684\u6570\u636E\u8F93\u5165\u7ED9\u8BF7\u6C42\u3002</span>
<span class="token class-name">BufferedSink</span> sink <span class="token operator">=</span> httpEngine<span class="token punctuation">.</span><span class="token function">getBufferedRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sink <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span><span class="token string">&quot;method does not support a request body: &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>httpEngine<span class="token punctuation">.</span><span class="token function">hasResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span><span class="token string">&quot;cannot write request body after response has been read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> sink<span class="token punctuation">.</span><span class="token function">outputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u987A\u4FBF\u518D\u770B\u4E00\u4E0B<code>getInputStream()</code>\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span><span class="token string">&quot;This protocol does not support input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u5B83\u4E5F\u4F1A\u76F4\u63A5\u8C03\u7528getResponse()\u65B9\u6CD5\uFF0C\u8FD9\u4E2A\u6BD4\u8F83\u597D\u7406\u89E3\u3002</span>
<span class="token class-name">HttpEngine</span> response <span class="token operator">=</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// if the requested file does not exist, throw an exception formerly the</span>
<span class="token comment">// Error page from the server was returned if the requested file was</span>
<span class="token comment">// text/html this has changed to return FileNotFoundException for all</span>
<span class="token comment">// file types</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> HTTP_BAD_REQUEST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">InputStream</span> result <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getResponseBodyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span><span class="token string">&quot;No response body exists; responseCode=&quot;</span> <span class="token operator">+</span> <span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u518D\u987A\u4FBF\u770B\u4E00\u4E0B<code>HttpURLConnection.disconnect()</code>\u65B9\u6CD5\uFF0C\u56E0\u4E3A\u8FD9\u4E2A\u65B9\u6CD5\u53EF\u80FD\u5F88\u591A\u4EBA\u4E0D\u6E05\u695A\u8BE5\u4E0D\u8BE5\u8C03\u7528\u4ED6,\u4E0D\u8FC7\u6CE8\u91CA\u8BF4\u7684\u5F88\u660E\u767D\u4E86\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Releases this connection so that its resources may be either reused or
 * closed.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Unlike other Java implementations, this will not necessarily close
 * socket connections that can be reused. You can disable all connection
 * reuse by setting the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">http<span class="token punctuation">.</span>keepAlive</span></span><span class="token punctuation">}</span> system property to <span class="token punctuation">{</span><span class="token keyword">@code</span>
 <span class="token code-section">* <span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> before issuing any HTTP requests.
 */</span>
<span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// Calling disconnect() before a connection exists should have no effect.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>httpEngine <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8C03\u7528HttpEngine.close()\u65B9\u6CD5</span>
  httpEngine<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u770B\u4E00\u4E0BHttpEngine.close()\u65B9\u6CD5:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Release any resources held by this engine. If a connection is still held by
* this engine, it is returned.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Connection</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedRequestBody <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// This also closes the wrapped requestBodyOut.</span>
  <span class="token function">closeQuietly</span><span class="token punctuation">(</span>bufferedRequestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requestBodyOut <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">closeQuietly</span><span class="token punctuation">(</span>requestBodyOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// If this engine never achieved a response body, its connection cannot be reused.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>responseBody <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">closeQuietly</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
  connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Close the response body. This will recycle the connection if it is eligible.</span>
<span class="token function">closeQuietly</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Clear the buffer held by the response body input stream adapter.</span>
<span class="token function">closeQuietly</span><span class="token punctuation">(</span>responseBodyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// HttpTransport.canReuseConnection()\u7528\u4E8E\u5224\u65AD\u8BE5Connection\u662F\u5426\u53EF\u590D\u7528</span>
<span class="token comment">// Close the connection if it cannot be reused.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>transport <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>transport<span class="token punctuation">.</span><span class="token function">canReuseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">closeQuietly</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
  connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Connection</span> result <span class="token operator">=</span> connection<span class="token punctuation">;</span>
connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7EE7\u7EED\u770B\u4E00\u4E0BcloseQuietly(connection)\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
* Closes <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">closeable</span></span><span class="token punctuation">}</span>, ignoring any checked exceptions. Does nothing
* if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">closeable</span></span><span class="token punctuation">}</span> is null.
*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeQuietly</span><span class="token punctuation">(</span><span class="token class-name">Closeable</span> closeable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>closeable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8FD9\u91CC\u4E5F\u5C31\u662FConnection\u7684close()\u65B9\u6CD5</span>
    closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> rethrown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> rethrown<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u518D\u63A5\u7740\u770B\u4E00\u4E0BConnection.close()\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
<span class="token comment">// \u76F4\u63A5\u8C03\u7528\u4E86socket.close()\u65B9\u6CD5\u3002\u8FD9\u4E9Bsocket\u4E5F\u5173\u4E86\u3002</span>
socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u518D\u770BSocket.close()\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Closes the socket. It is not possible to reconnect or rebind to this
 * socket thereafter which means a new socket instance has to be created.
 *
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
 *             if an error occurs while closing the socket.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    isClosed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    isConnected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// RI compatibility: the RI returns the any address (but the original local port) after</span>
    <span class="token comment">// close.</span>
    localAddress <span class="token operator">=</span> <span class="token class-name">Inet4Address</span><span class="token punctuation">.</span>ANY<span class="token punctuation">;</span>
    impl<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5230\u8FD9\u91CC\u5C31\u90FD\u770B\u5B8C\u4E86\uFF0C\u6700\u540E\u6211\u4EEC\u518D\u770B\u4E00\u4E0B\u4E0A\u9762\u7528\u5230\u7684\u8FDE\u63A5\u6C60\uFF0C\u4E5F\u5C31\u662F<code>ConnectionPool</code>\u7C7B: \u56E0\u4E3A\u5728\u4E0A\u9762\u7684\u5206\u6790\u4E2D\uFF0C\u6211\u4EEC\u53D1\u73B0\u6B64\u7C7B\u8D2F\u7A7F\u4E86\u5F88\u591A\u7C7B\u3002 \u5B83\u4E3A<code>OkHttpClient</code>\u4E2D\u7684\u5BF9\u8C61\uFF0C\u540E\u8D2F\u7A7F\u5230<code>HttpEngine</code>\u3001<code>Connection</code>\u3001<code>HttpConnection</code>\u7B49\u3002\u6240\u4EE5\u8981\u5206\u6790\u4E0B\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Manages reuse of HTTP and SPDY connections for reduced network latency. HTTP
 * requests that share the same <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span></span><span class="token class-name">Address</span></span><span class="token punctuation">}</span> may share a
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">}</span>. This class implements the policy of
 * which connections to keep open for future use.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> system-wide default<span class="token punctuation">}</span> uses system properties for
 * tuning parameters:
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
 *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">http<span class="token punctuation">.</span>keepAlive</span></span><span class="token punctuation">}</span> true if HTTP and SPDY connections should be
 *         pooled at all. Default is true.
 *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">http<span class="token punctuation">.</span>maxConnections</span></span><span class="token punctuation">}</span> maximum number of idle connections to
 *         each to keep in the pool. Default is 5.
 *     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">http<span class="token punctuation">.</span>keepAliveDuration</span></span><span class="token punctuation">}</span> Time in milliseconds to keep the
 *         connection alive in the pool before closing it. Default is 5 minutes.
 *         This property isn&#39;t used by <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">HttpURLConnection</span></span></span><span class="token punctuation">}</span>.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The default instance <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>doesn&#39;t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> adjust its configuration as system
 * properties are changed. This assumes that the applications that set these
 * parameters do so before making HTTP connections, and that this class is
 * initialized lazily.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionPool</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_CONNECTIONS_TO_CLEANUP <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> DEFAULT_KEEP_ALIVE_DURATION_MS <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 5 min</span>

  <span class="token comment">// \u8FD9\u4E2A\u5C31\u662FgetDefault\u65B9\u6CD5\u6240\u8FD4\u56DE\u7684\u9ED8\u8BA4\u8FDE\u63A5\u6C60\u3002</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionPool</span> systemDefault<span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> keepAlive <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;http.keepAlive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// \u5B58\u6D3B\u65F6\u95F4</span>
    <span class="token class-name">String</span> keepAliveDuration <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;http.keepAliveDuration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// \u6700\u5927\u7A7A\u95F2\u8FDE\u63A5\u6570</span>
    <span class="token class-name">String</span> maxIdleConnections <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;http.maxConnections&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> keepAliveDurationMs <span class="token operator">=</span> keepAliveDuration <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>keepAliveDuration<span class="token punctuation">)</span>
        <span class="token operator">:</span> DEFAULT_KEEP_ALIVE_DURATION_MS<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keepAlive <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>keepAlive<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      systemDefault <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionPool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> keepAliveDurationMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIdleConnections <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      systemDefault <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionPool</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>maxIdleConnections<span class="token punctuation">)</span><span class="token punctuation">,</span> keepAliveDurationMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      systemDefault <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> keepAliveDurationMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** The maximum number of idle connections for each address. */</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxIdleConnections<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> keepAliveDurationNs<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> connections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// \u8FDE\u63A5\u7684\u6709\u6548\u6027\u68C0\u6D4B\u662F\u6240\u6709\u8FDE\u63A5\u6C60\u90FD\u9762\u4E34\u7684\u4E00\u4E2A\u901A\u7528\u95EE\u9898\uFF0C\u5927\u90E8\u5206HTTP\u670D\u52A1\u5668\u4E3A\u4E86\u63A7\u5236\u8D44\u6E90\u5F00\u9500\uFF0C\u5E76\u4E0D\u4F1A\u6C38\u4E45\u7684\u7EF4\u62A4\u4E00\u4E2A\u957F\u8FDE\u63A5\uFF0C\u800C\u662F\u4E00\u6BB5\u65F6\u95F4\u5C31\u4F1A\u5173\u95ED\u8BE5\u8FDE\u63A5\u3002</span>
  <span class="token comment">// \u653E\u56DE\u8FDE\u63A5\u6C60\u7684\u8FDE\u63A5\uFF0C\u5982\u679C\u5728\u670D\u52A1\u5668\u7AEF\u5DF2\u7ECF\u5173\u95ED\uFF0C\u5BA2\u6237\u7AEF\u662F\u65E0\u6CD5\u68C0\u6D4B\u5230\u8FD9\u4E2A\u72B6\u6001\u53D8\u5316\u800C\u53CA\u65F6\u7684\u5173\u95EDSocket\u7684\u3002\u8FD9\u5C31\u9020\u6210\u4E86\u7EBF\u7A0B\u4ECE\u8FDE\u63A5\u6C60\u4E2D\u83B7\u53D6\u7684\u8FDE\u63A5\u4E0D\u4E00\u5B9A\u662F\u6709\u6548\u7684\u3002</span>
  <span class="token comment">// \u8FD9\u4E2A\u95EE\u9898\u7684\u4E00\u4E2A\u89E3\u51B3\u65B9\u6CD5\u5C31\u662F\u5728\u6BCF\u6B21\u8BF7\u6C42\u4E4B\u524D\u68C0\u67E5\u8BE5\u8FDE\u63A5\u662F\u5426\u5DF2\u7ECF\u5B58\u5728\u4E86\u8FC7\u957F\u65F6\u95F4\uFF0C\u53EF\u80FD\u5DF2\u8FC7\u671F\u3002\u4F46\u662F\u8FD9\u4E2A\u65B9\u6CD5\u4F1A\u4F7F\u5F97\u6BCF\u6B21\u8BF7\u6C42\u90FD\u589E\u52A0\u989D\u5916\u7684\u5F00\u9500\u3002</span>
  <span class="token comment">// \u6240\u4EE5\u901A\u8FC7\u4E0B\u9762\u7684\u4EFB\u52A1\u6765\u6267\u884C\u6E05\u7406\u8FC7\u671F\u7684\u8FDE\u63A5\u3002</span>
  <span class="token doc-comment comment">/** We use a single background thread to cleanup expired connections. */</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">&quot;OkHttp ConnectionPool&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> connectionsCleanupRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> expiredConnections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>MAX_CONNECTIONS_TO_CLEANUP<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> idleConnectionCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">ConnectionPool</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> connections<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>connections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">Connection</span> connection <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> connection<span class="token punctuation">.</span><span class="token function">isExpired</span><span class="token punctuation">(</span>keepAliveDurationNs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            expiredConnections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>expiredConnections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MAX_CONNECTIONS_TO_CLEANUP<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            idleConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> connections<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>connections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> idleConnectionCount <span class="token operator">&gt;</span> maxIdleConnections<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">Connection</span> connection <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            expiredConnections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">--</span>idleConnectionCount<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> expiredConnection <span class="token operator">:</span> expiredConnections<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>expiredConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">ConnectionPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxIdleConnections<span class="token punctuation">,</span> <span class="token keyword">long</span> keepAliveDurationMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdleConnections <span class="token operator">=</span> maxIdleConnections<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveDurationNs <span class="token operator">=</span> keepAliveDurationMs <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Returns a snapshot of the connections in this pool, ordered from newest to
   * oldest. Waits for the cleanup callable to run if it is currently scheduled.
   */</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> <span class="token function">getConnections</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">waitForCleanupCallableToRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>connections<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Blocks until the executor service has processed all currently enqueued
   * jobs.
   */</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">waitForCleanupCallableToRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConnectionPool</span> <span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> systemDefault<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Returns total number of connections in the pool. */</span>
  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getConnectionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> connections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Returns total number of spdy connections in the pool. */</span>
  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getSpdyConnectionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">:</span> connections<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> total<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Returns total number of http connections in the pool. */</span>
  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getHttpConnectionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">:</span> connections<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> total<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Returns a recycled connection to <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">address</span></span><span class="token punctuation">}</span>, or null if no such connection exists. */</span>
  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Connection</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Connection</span> foundConnection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> connections<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>connections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Connection</span> connection <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
          <span class="token operator">||</span> <span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">||</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> connection<span class="token punctuation">.</span><span class="token function">getIdleStartTimeNs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> keepAliveDurationNs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token comment">// \u4E0D\u662Fspdy\u8FDE\u63A5</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
		  <span class="token comment">// Platforml\u7C7B\u5BF9\u5F53\u524DAndroid\u5E73\u53F0\u505A\u4E86\u9002\u914D\u3002</span>
          <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tagSocket</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// When unable to tag, skip recycling and close</span>
          <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logW</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to tagSocket(): &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
	  <span class="token comment">// \u627E\u5230\u53EF\u590D\u7528\u7684Connection</span>
      foundConnection <span class="token operator">=</span> connection<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

	<span class="token comment">// \u9488\u5BF9spdy\u8FDE\u63A5\uFF0C\u6DFB\u52A0\u5230\u8FDE\u63A5\u6C60\u4E2D</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>foundConnection <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> foundConnection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      connections<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>foundConnection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Add it back after iteration.</span>
    <span class="token punctuation">}</span>

    executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>connectionsCleanupRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> foundConnection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Gives <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">connection</span></span><span class="token punctuation">}</span> to the pool. The pool may store the connection,
   * or close it, as its policy describes.
   *
   * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>It is an error to use <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">connection</span></span><span class="token punctuation">}</span> after calling this method.
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">untagSocket</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// When unable to remove tagging, skip recycling and close.</span>
      <span class="token class-name">Platform</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logW</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to untagSocket(): &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      connections<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      connection<span class="token punctuation">.</span><span class="token function">incrementRecycleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      connection<span class="token punctuation">.</span><span class="token function">resetIdleStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>connectionsCleanupRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * Shares the SPDY connection with the pool. Callers to this method may
   * continue to use <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">connection</span></span><span class="token punctuation">}</span>.
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isSpdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>connectionsCleanupRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        connections<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Close and remove all connections in the pool. */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evictAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> connections<span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      connections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connections<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>connections<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> connections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>connections<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>\u90AE\u7BB1 \uFF1Acharon.chui@gmail.com</li><li>Good Luck!</li></ul>`,66),o=[e];function c(l,i){return s(),a("div",null,o)}var k=n(p,[["render",c],["__file","HttpURLConnection\u8BE6\u89E3.html.vue"]]);export{k as default};
